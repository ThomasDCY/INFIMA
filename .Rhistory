genotype <- as.data.table(EE)
colnames(genotype) <- paste0(colnames(genotype),'-genotype')
snp.info <- as.data.table(snpData)[,c('Name','Chr','SNP','REF','ALT')]
colnames(snp.info) <- c('snp_id','chr','snp_pos','ref','alt')
dt3 <- cbind(snp.info, genotype, atac.seq)
dt3$footprint <- FF
dt3
gsub('Cast', 'CAST', colnames(dt3))
colnames(dt3) <- gsub('Cast', 'CAST', colnames(dt3))
save(dt1, dt2, dt3, file = '~/Documents/GitHub/INFIMA/others/inputs.RData')
write.table(dt1[chr == 'chr1'], file = '~/Documents/GitHub/INFIMA/others/input1-chr1.csv', sep = ',',
quote = F, row.names = F, col.names = T)
write.table(dt2[dt1$chr == 'chr1'], file = '~/Documents/GitHub/INFIMA/others/input2-chr1.csv', sep = ',',
quote = F, row.names = F, col.names = T)
write.table(dt3[chr == 'chr1'], file = '~/Documents/GitHub/INFIMA/others/input3-chr1.csv', sep = ',',
quote = F, row.names = F, col.names = T)
ind <- dt1$chr == 'chr1'
dt1 <- dt1[ind]
dt2 <- dt2[ind]
dt3 <- dt3[chr == 'chr1']
save(dt1, dt2, dt3, file = '~/Documents/GitHub/INFIMA/others/inputs-chr1.RData')
filename1 <- '~/Documents/GitHub/INFIMA/others/input1-chr1.csv'
filename2 <- '~/Documents/GitHub/INFIMA/others/input2-chr1.csv'
filename3 <- '~/Documents/GitHub/INFIMA/others/input3-chr1.csv'
dt1 <- fread(filename1)
dt2 <- fread(filename2)
dt3 <- fread(filename3)
dt1 <- dt1[1:10]
dt2 <- dt2[1:10]
save(dt1, dt2, dt3, file = '~/Documents/GitHub/INFIMA/data/example-10-genes.rda')
dt1
dt2
dt3
rm(list = ls())
ls()
dt1
data("example-10-genes")
dt1
document()
library(devtools)
document()
build()
install()
3000000*0.03*7/365
bark <- c(29, 10, 15, 41, 18, 18, 12, 45,
34, 30, 22, 26, 18, 40, 47, 38,
59, 45, 52, 57, 50, 50, 49, 50, 43)
sort(bark)
length(bark)
mean(bark)
mean(bark)
sum(bark)/length(bark)
paste(sort(bark), collapse = ', ')
median(bark)
summary(bark)
25*0.25
25*0.75
sum((bark - mean(bark))^2)
sum((bark - mean(bark))^2)/length(bark)
var(bark)
sum((bark - mean(bark))^2)/(length(bark) - 1)
var(bark)
sd(bark)
max(bark) - min(bark)
IQR(bark)
0.02*360
0.02*365
d <- c(34,29,23,31,34,28,32,39)
mean(d)
d <- c(34,29,23,31,34,28,32,29)
mean(d)
var(d)
92/7
sd(d)
library(data.table)
library(ggplot2)
library(GenomicAlignments)
library(RColorBrewer)
library(pheatmap)
library(viridis)
library(corrplot)
# load('~/Dropbox/AlanAttie4/MethodA/IDR_master_peak_list_trimmed_with_counts.RData')
# max.width <- 3000
# countMatScaled <- countMatScaled[width(peaks) <= max.width, ]
# corr.mat <- cor(countMatScaled)
# save(corr.mat, file = '~/Desktop/paper/Figure1/Figure1C.RData')
load('~/Documents/INFIMA-manuscript/Figure2/Figure2-corr/Figure2D.RData')
corr.mat
rownames(corr.mat) <- gsub('Cast','CAST',rownames(corr.mat))
colnames(corr.mat) <- gsub('Cast','CAST',colnames(corr.mat))
corrplot(corr.mat, order = "hclust", hclust.method = 'mcquitty',
addrect = 2, is.corr = F, method = 'color',
tl.col = 'black', tl.cex = 1.3)
pdf('~/Documents/INFIMA-manuscript/Figure2/Figure2-corr/Figure2D.pdf', onefile = F)
corrplot(corr.mat, order = "hclust", hclust.method = 'mcquitty',
addrect = 2, is.corr = F, method = 'color',
tl.col = 'black', tl.cex = 1.3)
dev.off()
### Figure 4 upset
# UpSet plot for DE genes that have at least one local-ATAC-QTL as eQTL
# the genotype of that DE gene is assigned as the best SNP
library(data.table)
library(UpSetR)
library(parallel)
# load('/p/keles/Collab_2014/volumeK/eQTL/output/cis.RData')
# load('/p/keles/Collab_2014/volumeK/AlanAttie4/RData/ATAC_QTL/ATAC-QTL.RData')
# cis.genes <- unique(cis$gene) # 6,418 genes in total
# cis.snps <- unlist(mclapply(cis.genes, function(x) cis[gene == x][order(FDR)][1]$SNP, mc.cores = 20))
#
# genotypes <- NULL
# for(i in 1:length(cis.snps)){
#   print(i)
#   genotypes <- rbind(genotypes, snpData[snpData$Name == cis.snps[i],8:15])
# }
#
# genotypes <- as.data.table(genotypes)
# # > dim(genotypes)
# # [1] 6418    8
# # QC good
#
# up
# genotypes <- as.matrix(genotypes)
# mode(genotypes) <- "integer"
# genotypes[genotypes == 2] <- 1
# genotypes <- as.data.table(genotypes)
# save(cis.genes, cis.snps, genotypes, file = 'Figure4A.RData')
rm(list = ls())
setwd('~/Documents/INFIMA-manuscript/Figure4/Figure4-upset/')
load('Figure4-upset.RData')
### Summary of ATAC-seq peaks compositions ###
# all 8 strains
strains <- c('129','AJ','B6','CAST','NOD','NZO','PWK','WSB')
# color scheme for all 8 strains
colors <- c(rgb(240, 128, 128, maxColorValue = 255, alpha = 255),
rgb(218, 165, 32, maxColorValue = 255, alpha = 255),
rgb(128, 128, 128, maxColorValue = 255, alpha = 255),
rgb(0, 160, 0, maxColorValue = 255, alpha = 255),
rgb(16, 16, 240, maxColorValue = 255, alpha = 255),
rgb(0, 160, 240, maxColorValue = 255, alpha = 255),
rgb(240, 0, 0, maxColorValue = 255, alpha = 255),
rgb(144, 0, 224, maxColorValue = 255, alpha = 255))
# only include the sets with more than 50 genes
metadata <- data.table(strains = strains)
metadata$names <- as.character(metadata$strains)
pdf('Figure4-upset.pdf', onefile = F, width = 8, height = 5.5)
upset(
genotypes,
sets = c('CAST','PWK','WSB','NOD','AJ','NZO','129','B6'),
#sets = c('129', 'AJ', 'B6', 'CAST', 'NOD', 'NZO', 'PWK', 'WSB'),
main.bar.color = 'black',
keep.order = T,
order.by = 'freq',
nintersects = 23,
text.scale = 1.5,
matrix.dot.alpha = 0.1,
sets.bar.color = colors[c(4,7,8,5,2,6,1,3)],
mainbar.y.label = "Number of top local-ATAC-QTL associations with the allele patterns",
sets.x.label = "Set size",
set.metadata = list(data = metadata,
plots = list(
list(
type = "matrix_rows",
column = "names",
colors = c(
`129` = colors[1],
AJ = colors[2],
B6 = colors[3],
CAST = colors[4],
NOD = colors[5],
NZO = colors[6],
PWK = colors[7],
WSB = colors[8]
),
alpha = 1
)
))
)
dev.off()
genotypes
colnames(genotypes) <- gsub('Cast', 'CAST', colnames(genotypes))
pdf('Figure4-upset.pdf', onefile = F, width = 8, height = 5.5)
upset(
genotypes,
sets = c('CAST','PWK','WSB','NOD','AJ','NZO','129','B6'),
#sets = c('129', 'AJ', 'B6', 'CAST', 'NOD', 'NZO', 'PWK', 'WSB'),
main.bar.color = 'black',
keep.order = T,
order.by = 'freq',
nintersects = 23,
text.scale = 1.5,
matrix.dot.alpha = 0.1,
sets.bar.color = colors[c(4,7,8,5,2,6,1,3)],
mainbar.y.label = "Number of top local-ATAC-QTL associations with the allele patterns",
sets.x.label = "Set size",
set.metadata = list(data = metadata,
plots = list(
list(
type = "matrix_rows",
column = "names",
colors = c(
`129` = colors[1],
AJ = colors[2],
B6 = colors[3],
CAST = colors[4],
NOD = colors[5],
NZO = colors[6],
PWK = colors[7],
WSB = colors[8]
),
alpha = 1
)
))
)
dev.off()
pdf('Figure4-upset.pdf', onefile = F, width = 8, height = 5.5)
upset(
genotypes,
sets = c('CAST','PWK','WSB','NOD','AJ','NZO','129','B6'),
#sets = c('129', 'AJ', 'B6', 'CAST', 'NOD', 'NZO', 'PWK', 'WSB'),
main.bar.color = 'black',
keep.order = T,
order.by = 'freq',
nintersects = 23,
text.scale = 1.5,
matrix.dot.alpha = 0.1,
sets.bar.color = colors[c(4,7,8,5,2,6,1,3)],
mainbar.y.label = "Number of top local-ATAC-QTL associations\n with the allele patterns",
sets.x.label = "Set size",
set.metadata = list(data = metadata,
plots = list(
list(
type = "matrix_rows",
column = "names",
colors = c(
`129` = colors[1],
AJ = colors[2],
B6 = colors[3],
CAST = colors[4],
NOD = colors[5],
NZO = colors[6],
PWK = colors[7],
WSB = colors[8]
),
alpha = 1
)
))
)
dev.off()
rm(list = ls())
#### t-SNE plot of samples ####
library(ggplot2)
library(data.table)
library(Rtsne)
load('~/Documents/AlanAttie4/RNA-seq/countmat_13568_protein_coding_UQUA_fixed.RData')
setwd('~/Documents/INFIMA-manuscript/Figure4/Figure4-tsne/')
pseudoCount <- log2(countmat.n + 1)
load('Figure4-tsne.RData')
t.sne
load('Figure4-tsne.RData')
t.sne$strain <- gsub('Cast', 'CAST', t.sne$strain)
g <- ggplot(t.sne, aes(x = x, y = y, color = strain)) + geom_point(size = 2, aes(shape = gender)) + scale_color_manual(values = colors)
g <- g + labs(x = 't-SNE dimension 1', y = 't-SNE dimension 2', color = 'Strain', shape = 'Gender')
pdf('Figure4-tsne.pdf', height = 5, width = 5)
g + theme_classic()
dev.off()
getwd()
?model_fitting
library(INFIMA)
?model_fitting
?summary
?plot
ls()
ls
?snp_link_gene
data('example-10-genes')
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
prior <- compute_prior(raw_data, model_data)
infima <- model_fitting(model_data, prior)
infima_results <- snp_link_gene(infima, raw_data, model_data, prior, fdr = 0.05, cum.pprob = 0.8, cred.set = 0.5)
as.data.frame(infima_results)
?as.data.frame
summary(infima)
?summary
class(infima)
summary.infima(infima)
summary(infima)
document()
library(devtools)
document()
install()
library(INFIMA)
library(INFIMA)
?DataFrame.infima_results
?DataFrame
?DataFrame.infima_results
ls()
?plot
summary(infima)
infima::summary
INFIMA::summary
document()
library(devtools)
document()
document()
document()
document()
install()
library(INFIMA)
library(INFIMA)
?plot
summary(infima)
summary(infima_results)
as.data.frame(infima_results)
?query_input_data
input_query <- query_input_data(infima_results, snp_id = 'rs51076312', ensembl = 'ENSMUSG00000037995', qtl_marker = '1_172713578')
plot(input_query)
plot(input_query,1)
plot(input_query, option = 1)
plot(input_query)
input_query
plot(input_query, option = 1)
input_query
plot(input_query, option = 1)
plot(input_query, option = sldkfjsldk)
plot(input_query)
plot(input_query)
library(devtools)
load_all()
plot(input_query)
plot(input_query,1)
plot()
plot
plot.input_query <- function(x, option = NULL){
stopifnot(class(x) == 'input_query')
if(is.null(option)){
stop('Please input the option argument!')
}
if(! option %in% c(1,2,3,4)){
stop('Invalid value for the option argument!')
}
colors <- c(rgb(240, 128, 128, maxColorValue = 255, alpha = 255),
rgb(218, 165, 32, maxColorValue = 255, alpha = 255),
rgb(128, 128, 128, maxColorValue = 255, alpha = 255),
rgb(0, 160, 0, maxColorValue = 255, alpha = 255),
rgb(16, 16, 240, maxColorValue = 255, alpha = 255),
rgb(0, 160, 240, maxColorValue = 255, alpha = 255),
rgb(240, 0, 0, maxColorValue = 255, alpha = 255),
rgb(144, 0, 224, maxColorValue = 255, alpha = 255))
if(option == 1){
grid <- par(mfrow = c(1,2),
mar = c(1,1,1,1) + 3)
plot(x$Y, main = '', xaxt = 'n',
xlab = 'Strain', ylab = 'DO allele effect',
col = colors, pch = 19)
axis(1, at=1:8, labels = names(x$Y))
plot(x$Y.t, main = '', xaxt = 'n',
xlab = 'Strain', ylab = 'DO allele effect (trinarized)',
col = colors, pch = 19)
axis(1, at=1:8, labels = names(x$Y.t))
par(grid)
}
if(option == 2){
plot(x$A, main = '', xaxt = 'n',
xlab = 'Strain', ylab = 'Local ATAC-seq signal',
col = colors, pch = 19)
axis(1, at=1:8, labels = names(x$A))
plot(x$A.t, main = '', xaxt = 'n',
xlab = 'Strain', ylab = 'Local ATAC-seq signal (trinarized)',
col = colors, pch = 19)
axis(1, at=1:8, labels = names(x$A.t))
par(grid)
}
if(option == 3){
plot(x$B.avg, main = '', xaxt = 'n',
xlab = 'Strain', ylab = 'Founder gene expression',
col = colors, pch = 19)
axis(1, at=1:8, labels = names(x$B.avg))
plot(x$B.t, main = '', xaxt = 'n',
xlab = 'Strain', ylab = 'Founder gene expression (trinarized)',
col = colors, pch = 19)
axis(1, at=1:8, labels = names(x$B.t))
par(grid)
}
if(option == 4){
plot(x$E.t, main = '', xaxt = 'n',
xlab = 'Strain', ylab = 'Founder allele effect (trinarized)',
col = colors, pch = 19)
axis(1, at=1:8, labels = names(x$E.t))
plot(x$D, main = '', xaxt = 'n',
xlab = 'Strain', ylab = 'Edit distance',
col = colors, pch = 19)
axis(1, at=1:8, labels = names(x$E.t))
par(grid)
}
}
plot.input_query(input_query)
plot.input_query(input_query,1)
plot(input_query,1)
plot(input_query, 1)
plot(input_query, option = 1)
plot(input_query)
option = 1
if(! option %in% c(1,2,3,4)){
stop('Invalid value for the option argument!')
}
! option %in% c(1,2,3,4)
option
grid <- par(mfrow = c(1,2),
mar = c(1,1,1,1) + 3)
plot(x$Y, main = '', xaxt = 'n',
xlab = 'Strain', ylab = 'DO allele effect',
col = colors, pch = 19)
x
plot(input_query)
plot(input_query,1)
ls()
plot(input_query,1)
plot.input_query(input_query,1)
load_all()
plot(input_query)
plot(input_query,1)
plot.input_query(input_query,1)
class(input_query)
dev.off
dev.off()
plot.input_query(input_query,1)
x <- input_query
plot.input_query(input_query,1)
grid <- par(mfrow = c(1,2),
mar = c(1,1,1,1) + 3)
plot(x$Y, main = '', xaxt = 'n',
xlab = 'Strain', ylab = 'DO allele effect',
col = colors, pch = 19)
x$Y
plot(x$Y, main = '', xaxt = 'n',
xlab = 'Strain', ylab = 'DO allele effect',
col = colors, pch = 19)
plot(x$Y, main = '', xaxt = 'n',
xlab = 'Strain', ylab = 'DO allele effect',
col = colors, pch = 19)
axis(1, at=1:8, labels = names(x$Y))
x$Y
class(x$Y)
document()
document()
load_all()
plot_input(input_query)
plot_input(input_query,1)
plot_input(input_query,2)
plot_input(input_query,3)
plot_input(input_query,4)
a <- plot_input(input_query,4)
a
input_query$snp_id
?plot_input
document()
install()
suppressWarnings(library(knitr))
library(INFIMA)
data('example-10-genes')
dt1[1,] # DO-eQTL data
nrow(dt1) == nrow(dt2) # the genes should be the same
dt3[1,]
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
prior <- compute_prior(raw_data, model_data)
infima <- model_fitting(model_data, prior)
summary(infima)
infima_results <- snp_link_gene(infima, raw_data, model_data, prior, fdr = 0.05, cum.pprob = 0.8, cred.set = 0.5)
summary(infima_results)
as.data.frame(infima_results)
input_query <- query_input_data(infima_results, snp_id = 'rs51076312', ensembl = 'ENSMUSG00000037995', qtl_marker = '1_172713578')
plot_input(input_query, option = 1) ## DO allele effect data
plot_input(input_query, option = 2) ## ATAC-seq data
plot_input(input_query, option = 3) ## RNA-seq data
plot_input(input_query, option = 4) ## edit distance and founder allele effect
plot_input(input_query, option = 1) ## DO allele effect data
plot_input(input_query, option = 2) ## ATAC-seq data
plot_input(input_query, option = 3) ## RNA-seq data
plot_input(input_query, option = 4) ## edit distance and founder allele effect
?prior
?cor.A.E
?cor.A.E
library(INFIMA)
?summary
summary(c(1:10))
summary(infima)
?prior
?snp_link_gene
?input_query
document()
library(devtools)
document()
build()
vignette()
use_vignette()
session_info()
cat('lksjdf', '\n')
cat('lksjdf')
load("/Users/ThomasDCY/Documents/AlanAttie4/EM/run090319/validation/EM_results_090419.RData")
ls()
params
load("/Users/ThomasDCY/Documents/AlanAttie4/hg19-mm10/main/examples.RData")
ls()
dt
load("/Users/ThomasDCY/Documents/AlanAttie4/hg19-mm10/main/snps.link.gene.RData")
ls()
length(snps.link.gene)
snps.link.gene[[1]]
sum(sapply(snps.link.gene, function(x) !is.null(x)))
plot(input_query,1)
