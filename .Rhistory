})
cor.A.R <- lapply(cor.A.R, function(x) {
if(length(x) > 0) return(abs(x))
else return(x)
})
which.max(Z.g[[1]])
len <- sapply(Z.g, length)
Z.g[[366]]
which.max(NULL)
# rank(): the higher the rank, the larger the true value
getRank <- function(i, quantity){
if(length(Z.g[[i]]) > 0){
ind <- which.max(Z.g[[i]])
return(rank(quantity[[i]])[ind]/length(quantity[[i]]))
}
else{
return(NA)
}
}
cor.A.E.rank <- sapply(1:length(Z.g), function(x) getRank(x, cor.A.E))
summary(cor.A.E.rank)
cor.A.R.rank <- sapply(1:length(Z.g), function(x) getRank(x, cor.A.R))
summary(cor.A.R.rank)
F.g.rank <- sapply(1:length(Z.g), function(x) getRank(x, F.g))
summary(F.g.rank)
dist.rank <- sapply(1:length(Z.g), function(x) getRank(x, dist))
summary(dist.rank)
dt <- data.table(cor.A.E.rank = cor.A.E.rank,
cor.A.R.rank = cor.A.R.rank,
F.g.rank = F.g.rank,
dist.rank = dist.rank)
dt
dt <- na.omit(dt)
dt
# for each DO gene, rank the contribution from each piece of information
dt$id <- 1:nrow(dt)
dt2 <- melt(dt, id.vars = 'id')
dt2
dt
# for each DO gene, rank the contribution from each piece of information
dt$id <- 1:nrow(dt)
# for each DO gene, rank the contribution from each piece of information
dt$id <- 1:nrow(dt)
dt <- dt[V.g >= tau]
dt
dt2 <- melt(dt, id.vars = 'id')
dt3 <- dt2[, variable[which.max(value)], by = id]
table(dt3$V1)/nrow(dt3)
dt4 <- dt2[, max(value), by = id]
dt4$variable <- dt3$V1
colnames(dt4) <- c('id', 'Score', 'Variable')
ggplot(dt4, aes(x = Variable, y = Score, color = Variable)) +
geom_boxplot()
tmp <- table(dt3$V1)/nrow(dt3)
tmp <- data.table(Proportion = as.numeric(tmp),
Name = names(tmp))
tmp
library(latex2exp)
library(viridis)
tmp$Name <- c('|cor(A,E)|',
'|cor(A,B)|',
'Footprint',
'Distance')
tmp$Name <- factor(tmp$Name, levels = c('|cor(A,E)|',
'|cor(A,B)|',
'Footprint',
'Distance'))
p <- ggplot(tmp, aes(x = '', y = Proportion, fill = Name)) + geom_bar(stat = 'identity')
p <- p + theme(axis.text.x = element_blank()) + theme_classic()
p <- p + labs(x = 'Pseudocount Components', y = 'Proportion', fill = 'Components')
pdf('~/Documents/INFIMA-manuscript/Figure6/Figure6E.pdf', width = 3, height = 4)
p + scale_fill_viridis(discrete = T)
dev.off()
V.g <- sapply(Z.g, function(x) ifelse(length(x) > 0, sum(x), NA))
boxplot(V.g)
V.g <- V.g[!is.na(V.g)]
pdf('~/Documents/INFIMA-manuscript/Figure6/Figure6F.pdf', width = 3, height = 3)
ggplot(data.table(V.g = V.g), aes(x = '', y = V.g)) + geom_violin(color = '#56B4E9') + geom_boxplot(width=0.1) +
geom_hline(yintercept = tau, color = 'red', lty = 2) + theme_classic() +
labs(x = TeX('Distribution of $V_g$'), y = TeX('$V_g$'))
dev.off()
dt4
library(dplyr)
dt4$Variable <- recode(dt4$Variable, 'cor.A.E.rank' = '|cor(A,E)|',
'cor.A.R.rank' = '|cor(A,B)|',
'F.g.rank' = 'Footprint',
'dist.rank' = 'Distance')
pdf('~/Documents/INFIMA-manuscript/Figure6/Figure6G.pdf', width = 3, height = 4)
ggplot(dt4, aes(x = Variable, y = Score, fill = Variable)) +
geom_boxplot() + scale_fill_viridis(discrete = T) + theme_classic() +
labs(x = '', y = 'Rank Score') + theme(legend.position = 'none')
dev.off()
#### Figure 6 (d)
#### the percentage of SNPs in the best group
rm(list = ls())
load('~/Dropbox/EM/run090319/validation/count.dt.RData')
library(data.table)
library(ggplot2)
library(dplyr)
# validate those with V.g >= tau
load('~/Dropbox/EM/run090319/validation/EM_results_090419.RData')
ind <- unlist(lapply(Z.g, function(x) length(x) > 1))
Z.g <- Z.g[ind]
V.g <- unlist(lapply(Z.g, sum))
# consider V.g >= tau as causal
direct.pprob <- function(p, fdr = 0.05){
err <- 1 - p # the error rate
err <- sort(err) # ascending order
tau <- 1 - err[max(which( (cumsum(err)/1:length(err) <= fdr) == 1 ))]
return(tau)
}
tau <- direct.pprob(V.g)
count.dt <- count.dt[V.g >= tau]
# > quantile(count.dt$p.g, probs = c(0.2,0.4,0.6,0.8))
# 20% 40% 60% 80%
#   19  30  43  62
count.dt <- count.dt[p.g.b2.max > 0]
count.dt$b1.max = count.dt$p.g.b1.max/count.dt$p.g
count.dt
count.dt2 <- count.dt[,3:4]
colnames(count.dt2) <- c('SNP Count', 'Most Likely')
count.dt2$bin <- ntile(count.dt2$`SNP Count`,5)
count.dt2$interval <- ''
count.dt2[bin == 1]$interval <- 'p <= 18'
count.dt2[bin == 2]$interval <- '18 < p <= 30'
count.dt2[bin == 3]$interval <- '31 < p <= 42'
count.dt2[bin == 4]$interval <- '43 < p <= 60'
count.dt2[bin == 5]$interval <- 'p > 60'
count.dt2$interval <- factor(count.dt2$interval, levels = c('p <= 18', '18 < p <= 30',
'31 < p <= 42','43 < p <= 60',
'p > 60'))
library(ggsci)
library(latex2exp)
medians <- aggregate(`Most Likely` ~ interval, count.dt2, median)
medians$`Most Likely` <- round(medians$`Most Likely`, 3)
g3 <- ggplot(count.dt2, aes(x = interval, y = `Most Likely`, fill = interval)) + geom_boxplot(show.legend = F) + scale_fill_startrek()
g3 <- g3 + labs(y = 'Proportion', x = TeX('Interval of p_g'))
g3 <- g3 + stat_summary(fun.y=median, colour="white", geom="point",
shape=18, size=3,show.legend = FALSE)
g3 <- g3 + geom_text(data = medians, aes(label = `Most Likely`, y = `Most Likely` + 0.04))
pdf('~/Documents/INFIMA-manuscript/Figure6/Figure6D.pdf', width = 5, height = 3)
g3 + theme_classic()
dev.off()
# Figure 3 (b)
##### Islet TF enrichment analysis using FIMO
### aggregated profile for each motif
### For each motif, we compute (1) observed FPD (2) expected FPD, average from similar motifs
rm(list = ls())
library(data.table)
library(ggplot2)
library(ggrepel)
setwd('~/Documents/INFIMA-manuscript/Figure3/')
# load('~/Dropbox/AlanAttie4/MEME/ProfileSummaryB6andCast.RData')
# dfProfile <- dfProfile[strain == 'B6']
# # aggregated profiles in those peaks present in B6
# # compute the footprint pattern
# fpdb <- (dfProfile$flank.lb + dfProfile$flank.rb)/2 - dfProfile$bind
# fpda <- (dfProfile$flank.la + dfProfile$flank.ra)/2 - dfProfile$bind
# fpd <- ifelse(fpda > fpdb, fpda, fpdb)
# dfProfile$fpd.prop <- ifelse(fpd == fpda,
#                              2*fpda/(dfProfile$flank.la + dfProfile$flank.ra),
#                              2*fpdb/(dfProfile$flank.lb + dfProfile$flank.rb))
# dfProfile[is.na(fpd.prop)]$fpd.prop <- 0
# dfProfile
# # > summary(dfProfile$fpd.prop)
# # Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# # -0.3044  0.0000  0.1271  0.1483  0.2776  0.8816
#
#
# # TFs specific to alpha cells
# # alpha.tf <- c('Gcg','Mafb','Hes1','Irx2','Neurog3','Arx','Irx1','Brn4')
# alpha.tf <- c('Mafb','Irx2','Arx')
# # TFs specific to beta cells
# # beta.tf <- c('Mnx1','Mafa','Pdx1','Nkx6.1','Insm1','Ins2','Ins1')
# beta.tf <- c('Mnx1','Pdx1','Nkx6.1')
# # Other TFs related to islet
# #other.tf <- c('Foxa3','Maff','Foxo1','Nkx2.2','Rfx6','Pax6','Neurod1','Isl1','Myt1','Foxa2','Mafg','Mafk','Foxa1','CTCF','Pax4')
# other.tf <- c('Nkx2.2','Pax6','Foxa2','Mafk','CTCF','Pax4')
#
#
# temp <- dfProfile
# alpha.index <- apply(as.matrix(alpha.tf), 1, function(x){grep(x, temp$name)})
# beta.index <- apply(as.matrix(beta.tf), 1, function(x){grep(x, temp$name)})
# other.index <- apply(as.matrix(other.tf), 1, function(x){grep(x, temp$name)})
# alpha.index
# beta.index
# other.index
#
# all.index <- c(unlist(alpha.index), unlist(beta.index), unlist(other.index))
#
#
# # list of similar TFs for each islet TF
# sim.TFs <- vector('list',length(all.index))
#
# ##### check the islet TF enrichment #####
# CheckSimilarTF <- function(i, width.offset = 1, ic.offset = 0.1){
#   #index <- all.index[i]
#   index <- i
#   width.ref <- temp$width[index]
#   ic.ref <- temp$ic[index]
#   res <- temp[abs(width - width.ref) <= width.offset][abs(ic - ic.ref) <= ic.offset]
#   #expected <- (sum(res$fpd.prop) - temp$fpd.prop[index])/(nrow(res)-1)
#   expected <- mean(res$fpd.prop)
#   print(paste0('No.',i, ' ', temp$name[index], ' Expected = ', expected, ' Observed = ', temp$fpd.prop[index]))
#   return(list(obs = temp$fpd.prop[index], exp = expected))
# }
#
# res <- vector('list', 1316)
# for(i in 1:1316){
#   res[[i]] <- CheckSimilarTF(i, width.offset = 1, ic.offset = 0.2)
# }
#
# obs <- unlist(lapply(res, function(x) x$obs))
# expect <- unlist(lapply(res, function(x) x$exp))
#
#
# # [1] "Mafb_2 rank = 9 out of 106"
# # [1] "Mafb_1 rank = 148 out of 267"
# # [1] "Mafb rank = 18 out of 28"
# # [1] "Irx2 rank = 169 out of 283"
# # [1] "Arx rank = 91 out of 269"
# # [1] "Mnx1 rank = 148 out of 319"
# # [1] "Pdx1 rank = 186 out of 331"
# # [1] "Pdx1 rank = 63 out of 107"
# # [1] "Nkx6-1_1 rank = 15 out of 282"
# # [1] "Nkx6-1_2 rank = 30 out of 304"
# # [1] "Nkx2-2 rank = 198 out of 286"
# # [1] "Pax6 rank = 29 out of 331"
# # [1] "Pax6 rank = 27 out of 49"
# # [1] "Foxa2 rank = 8 out of 38"  "Foxa2 rank = 33 out of 38"
# # [1] "Foxa2_2 rank = 9 out of 39"
# # [1] "Foxa2_1 rank = 92 out of 287"
# # [1] "Foxa2 rank = 7 out of 46"  "Foxa2 rank = 40 out of 46"
# # [1] "Mafk_2 rank = 12 out of 175"
# # [1] "Mafk_1 rank = 53 out of 182"
# # [1] "CTCF rank = 7 out of 19"
# # [1] "Pax4 rank = 102 out of 284"
# # [1] "Pax4 rank = 1 out of 1"
#
#
# #### Making plots ####
# type <- rep('other', 1316)
# type[unlist(alpha.index)] <- 'alpha'
# type[unlist(beta.index)] <- 'beta'
# type[unlist(other.index)] <- 'islet'
# table(type)
# # type
# # alpha  beta islet other
# # 5     5    12  1294
# dt <- data.table(motif = paste(dfProfile$id, dfProfile$name, sep = ';'),
#                  width = dfProfile$width,
#                  ic = dfProfile$ic,
#                  label = dfProfile$name,
#                  type = type,
#                  observed = obs,
#                  expected = expect)
#
# dt$type <- factor(dt$type, levels = c('alpha','beta','islet','other'))
# save(dt, file = '~/Dropbox/AlanAttie4/MEME/fpd_enrichment.RData')
# load('~/Dropbox/AlanAttie4/MEME/fpd_enrichment.RData')
#
# dt2 <- dt[type != 'other']
# dt2$type <- as.character(dt2$type)
# dt2[type == 'alpha']$type <- 'Alpha Cell'
# dt2[type == 'beta']$type <- 'Beta Cell'
# dt2[type == 'islet']$type <- 'Other Cell'
# dt2$type <- factor(dt2$type, levels = c('Alpha Cell','Beta Cell','Other Cell'))
#
# dt2 <- dt2[-c(2,3,4,5,7)]
# save(dt2, file = './Figure3B.RData')
rm(list = ls())
load('./Figure3B.RData')
g1 <- ggplot(dt2, aes(x = expected, y = observed, color = type)) +
geom_point(alpha = 0.5, size = 2) +
scale_color_manual(values = c('green3','red','blue')) +
geom_text_repel( data = dt2,
aes(label = label, color = type),
size = 3, # the font of point label
box.padding = unit(0.35, 'lines'),
point.padding = unit(0.3, 'lines'),
show.legend = F)
g1 <- g1 + labs(x = 'Expected Footprint Depth',
y = 'Observed Footprint Depth',
color = 'Islet Cell Type')
g1 <- g1 + xlim(c(-0.05,0.55)) + ylim(c(-0.05,0.55))
g1 <- g1 + geom_abline(intercept = 0, slope = 1, color = 'grey3', linetype = 'twodash', lwd = 2)
pdf('./Figure3B.pdf', width = 5, height = 3)
g1 + theme_classic(base_size = 12) # adjust axis label text font
dev.off()
# Figure 3 (c) #
# Foxa2 enrichment showcase in terms of aggregated footprint profiles
library(data.table)
# setwd('/p/keles/Collab_2014/volumeK/AlanAttie4/MEME/run121818/profiles/IsletTFenrich/B6/')
# load('ProfileSummary.RData')
# # MA0047.1;Foxa2   row = 47
# row.no <- 47
# dfProfile$index <- 1:1316
# width.ref <- dfProfile$width[row.no]
# ic.ref <- dfProfile$ic[row.no]
# width.offset = 0
# ic.offset = 0.2
# index <- dfProfile[abs(width - width.ref) <= width.offset][abs(ic - ic.ref) <= ic.offset]$index
# index <- index[index!=row.no]
#
# compute_avg_profile <- function(indexes){
#   ans <- rep(0, 100 + width.ref)
#   for(i in 1:length(indexes)){
#     load(paste0(indexes[i],'ProfileInfo.RData'))
#     ans <- ans + (profile[['+']] + profile[['-']])/2
#   }
#   ans <- ans/length(indexes)
#   return(ans)
# }
#
# profile.obs <- compute_avg_profile(row.no)
# profile.exp <- compute_avg_profile(index)
# save(profile.obs, profile.exp, file = '/p/keles/Collab_2014/volumeK/AlanAttie4/MEME/run121818/profiles/IsletTFenrich/Foxa2-47/Foxa2-47-profile.RData')
rm(list = ls())
setwd('~/Documents/INFIMA-manuscript/Figure3/')
load('Foxa2-47-profile.RData')
load('~/Dropbox/AlanAttie4/atSNP/run080519/jasparfix.RData')
source('~/Dropbox/AlanAttie4/Aug4PIQpipeline/Aug6bgFootprint/plotMultiFootprints.R')
library(motifStack)
pwm2pfm <- function(pfm, name="motif"){
if(!all(round(colSums(pfm), digits=4)==1)){
return(NULL)
}
new("pfm", mat=as.matrix(pfm), name=name)
}
row.no <- 47
motif <- pwm[[row.no]]
motif.name <- names(pwm)[row.no]
colsum <- apply(motif,2,sum)
motif <- sweep(motif, 2, colsum, FUN = '/')
rownames(motif) <- c("A","C","G","T")
colnames(motif) <- 1:ncol(motif)
ProfileList <- list(profile.obs, profile.exp)
legList <- c('Observed Footprint', 'Expected Footprint')
colList <- c('blue','black')
lwdList <- c(2,3)
ltyList <- c(1,2)
lowessFList <- c(0.05,0.1)
pdf('~/Documents/INFIMA-manuscript/Figure3/Figure3C.pdf')
plotMultiFootprints(ProfileList = ProfileList,
legList = legList,
colList = colList,
lwdList = lwdList,
ltyList = ltyList,
lowessFList = lowessFList,
legTitle = motif.name,
Mlen = dim(motif)[2],
motif = pwm2pfm(motif))
dev.off()
### Figure 2 (f) ###
# heatmap of islet TFs and their SNPs
rm(list = ls())
library(data.table)
library(pheatmap)
library(grid)
library(RColorBrewer)
colors <- c(brewer.pal(9,'Reds')[3:9], 'black', brewer.pal(9,'Greens')[9:3]) # 15
setwd('~/Documents/INFIMA-manuscript/Figure3/')
load('./Figure3B.RData')
load('~/Dropbox/AlanAttie4/atSNP/run080519/snpMotifMat.RData')
# 1350 SNPs vs 1196 motifs
dt2$type <- gsub(' Cell','',dt2$type)
dt2$type <- gsub('Other', 'Islet', dt2$type)
dt2 <- dt2[order(type)]
dt2
ind <- match(dt2$motif, colnames(snpMotifMat))
dt2 <- dt2[!is.na(ind)]
ind <- ind[!is.na(ind)]
snpMotifMat.islet <- snpMotifMat[, ind]
snpMotifMat.islet <- snpMotifMat.islet[rowSums(snpMotifMat.islet != 0) > 0,]
dim(snpMotifMat.islet[rowSums(snpMotifMat.islet) > 0,]) # 15 SNPs involve in enhancing
dim(snpMotifMat.islet[rowSums(snpMotifMat.islet) < 0,]) # 31 SNPs involve in disrupting
snpMotifMat.islet <- rbind(snpMotifMat.islet[rowSums(snpMotifMat.islet) > 0,],
snpMotifMat.islet[rowSums(snpMotifMat.islet) < 0,])
mat_col <- data.frame(Type = factor(dt2$type, levels = c('Alpha','Beta','Islet')))
rownames(mat_col) <- colnames(snpMotifMat.islet)
mat_colors <- list(Type = c('green','red','blue'))
names(mat_colors$Type) <- c('Alpha','Beta','Islet')
quantile_breaks <- function(xs, n = 10, start, end) {
breaks <- quantile(xs, probs = seq(start, end, length.out = n))
breaks[!duplicated(breaks)]
}
tmp <- as.vector(snpMotifMat.islet)
tmp.pos <- tmp[tmp > 0]
tmp.neg <- tmp[tmp < 0]
neg.breaks <- quantile_breaks(tmp.neg, n = 8, 0, 1)
pos.breaks <- quantile_breaks(tmp.pos, n = 8, 0, 1)
mat_breaks <- c(neg.breaks, pos.breaks)
## For pheatmap_1.0.8 and later:
draw_colnames_45 <- function (coln, gaps, ...) {
coord = pheatmap:::find_coordinates(length(coln), gaps)
x = coord$coord - 0.5 * coord$size
res = textGrob(coln, x = x, y = unit(1, "npc") - unit(3,"bigpts"), vjust = 0.5, hjust = 0, rot = -45, gp = gpar(...))
return(res)}
## 'Overwrite' default draw_colnames with your own version
assignInNamespace(x="draw_colnames", value="draw_colnames_45",
ns=asNamespace("pheatmap"))
pdf('./Figure3F.pdf', width = 7, height = 12)
pheatmap(snpMotifMat.islet,
color = colors,
breaks = mat_breaks,
cluster_rows = F,
cluster_cols = F,
treeheight_row = 0,
treeheight_col = 0,
show_rownames = T,
show_colnames = T,
border_color = NA,
fontsize_row = 12,
fontsize_col = 12,
gaps_col = c(3,7),
gaps_row = 15,
annotation_col    = mat_col,
annotation_colors = mat_colors,
annotation_legend = F,
legend = F,
main = "")
dev.off()
#### Draw color scale
mat_breaks[16] <- 6.5
mat_breaks[1] <- -6.5
color_palette <- matrix(0, length(mat_breaks)-1,1)
for(i in 1:(length(mat_breaks) - 1)){
color_palette[i,1] <- (mat_breaks[i] + mat_breaks[i+1])/2
}
pdf('./Figure3F_legend.pdf')
pheatmap(color_palette,
color = colors,
breaks = mat_breaks,
cluster_rows = F,
cluster_cols = F,
treeheight_row = 0,
treeheight_col = 0,
show_rownames = T,
show_colnames = F,
border_color = NA,
fontsize_row = 22,
fontsize_col = 26,
legend_breaks = c(-5,-3,-1,0,1,3,5),
legend_labels = c('< -5','-3','-1','0','1','3','> 5'),
main = "")
dev.off()
pdf('./Figure3F.pdf', width = 7, height = 12)
pheatmap(snpMotifMat.islet,
color = colors,
breaks = mat_breaks,
cluster_rows = F,
cluster_cols = F,
treeheight_row = 0,
treeheight_col = 0,
show_rownames = T,
show_colnames = T,
border_color = NA,
fontsize_row = 12,
fontsize_col = 12,
gaps_col = c(3,7),
gaps_row = 15,
annotation_col    = mat_col,
annotation_colors = mat_colors,
annotation_legend = F,
legend = F,
main = "")
dev.off()
#### Draw color scale
mat_breaks[16] <- 6.5
mat_breaks[1] <- -6.5
color_palette <- matrix(0, length(mat_breaks)-1,1)
for(i in 1:(length(mat_breaks) - 1)){
color_palette[i,1] <- (mat_breaks[i] + mat_breaks[i+1])/2
}
pdf('./Figure3F_legend.pdf')
pheatmap(color_palette,
color = colors,
breaks = mat_breaks,
cluster_rows = F,
cluster_cols = F,
treeheight_row = 0,
treeheight_col = 0,
show_rownames = T,
show_colnames = F,
border_color = NA,
fontsize_row = 22,
fontsize_col = 26,
legend_breaks = c(-5,-3,-1,0,1,3,5),
legend_labels = c('< -5','-3','-1','0','1','3','> 5'),
main = "")
dev.off()
pdf('./Figure3F.pdf', width = 7, height = 12)
pheatmap(snpMotifMat.islet,
color = colors,
breaks = mat_breaks,
cluster_rows = F,
cluster_cols = F,
treeheight_row = 0,
treeheight_col = 0,
show_rownames = T,
show_colnames = T,
border_color = NA,
fontsize_row = 12,
fontsize_col = 12,
gaps_col = c(3,7),
gaps_row = 15,
annotation_col    = mat_col,
annotation_colors = mat_colors,
annotation_legend = F,
legend = F,
main = "")
dev.off()
