strains <- c('129', 'AJ', 'B6', 'CAST',
'NOD', 'NZO', 'PWK', 'WSB')
colors <- c(
rgb(240, 128, 128, maxColorValue = 255, alpha = 255),
rgb(218, 165, 32, maxColorValue = 255, alpha = 255),
rgb(128, 128, 128, maxColorValue = 255, alpha = 255),
rgb(0, 160, 0, maxColorValue = 255, alpha = 255),
rgb(16, 16, 240, maxColorValue = 255, alpha = 255),
rgb(0, 160, 240, maxColorValue = 255, alpha = 255),
rgb(240, 0, 0, maxColorValue = 255, alpha = 255),
rgb(144, 0, 224, maxColorValue = 255, alpha = 255)
)
if (option == 1) {
grid <- par(mfrow = c(1, 2),
mar = c(1, 1, 1, 1) + 3)
plot(
x$Y,
main = '',
xaxt = 'n',
xlab = 'Strain',
ylab = 'DO allele effect',
col = colors,
pch = 19
)
axis(1, at = 1:8, labels = strains)
plot(
x$Y.t,
main = '',
xaxt = 'n',
xlab = 'Strain',
ylab = 'DO allele effect (trinarized)',
col = colors,
pch = 19,
yaxt = 'n',
ylim = c(-1,1)
)
axis(1, at = 1:8, labels = strains)
axis(2, at = c(-1,0,1), labels = c('low', 'middle', 'high'))
par(grid)
}
if (option == 2) {
grid <- par(mfrow = c(1, 2),
mar = c(1, 1, 1, 1) + 3)
plot(
x$A,
main = '',
xaxt = 'n',
xlab = 'Strain',
ylab = 'Local ATAC-seq signal',
col = colors,
pch = 19
)
axis(1, at = 1:8, labels = strains)
plot(
x$A.t,
main = '',
xaxt = 'n',
xlab = 'Strain',
ylab = 'Local ATAC-seq signal (trinarized)',
col = colors,
pch = 19,
yaxt = 'n',
ylim = c(-1,1)
)
axis(1, at = 1:8, labels = strains)
axis(2, at = c(-1,0,1), labels = c('low', 'middle', 'high'))
par(grid)
}
if (option == 3) {
grid <- par(mfrow = c(1, 2),
mar = c(1, 1, 1, 1) + 3)
plot(
x$B.avg,
main = '',
xaxt = 'n',
xlab = 'Strain',
ylab = 'Founder gene expression',
col = colors,
pch = 19
)
axis(1, at = 1:8, labels = strains)
plot(
x$B.t,
main = '',
xaxt = 'n',
xlab = 'Strain',
ylab = 'Founder gene expression (trinarized)',
col = colors,
pch = 19,
yaxt = 'n',
ylim = c(-1,1)
)
axis(1, at = 1:8, labels = strains)
axis(2, at = c(-1,0,1), labels = c('low', 'middle', 'high'))
par(grid)
}
if (option == 4) {
grid <- par(mfrow = c(1, 2),
mar = c(1, 1, 1, 1) + 3)
plot(
x$E.t,
main = '',
xaxt = 'n',
xlab = 'Strain',
ylab = 'Founder allele effect (trinarized)',
col = colors,
pch = 19,
yaxt = 'n',
ylim = c(-1,1)
)
axis(1, at = 1:8, labels = strains)
axis(2, at = c(-1,0,1), labels = c('low', 'middle', 'high'))
plot(
x$D,
main = '',
xaxt = 'n',
xlab = 'Strain',
ylab = 'Edit distance',
col = colors,
pch = 19
)
axis(1, at = 1:8, labels = strains)
par(grid)
}
}
dev.off()
plot_input(x, 1)
plot_input(x, 2)
plot_input(x, 3)
plot_input(x, 4)
-2:2
plot(
x$D,
main = '',
xaxt = 'n',
xlab = 'Strain',
ylab = 'Edit distance',
col = colors,
pch = 19,
yaxt = 'n'
)
axis(1, at = 1:8, labels = strains)
axis(2, at = -2:2)
grid <- par(mfrow = c(1, 2),
mar = c(1, 1, 1, 1) + 3)
plot(
x$E.t,
main = '',
xaxt = 'n',
xlab = 'Strain',
ylab = 'Founder allele effect (trinarized)',
col = colors,
pch = 19,
yaxt = 'n',
ylim = c(-1,1)
)
axis(1, at = 1:8, labels = strains)
axis(2, at = c(-1,0,1), labels = c('low', 'middle', 'high'))
plot(
x$D,
main = '',
xaxt = 'n',
xlab = 'Strain',
ylab = 'Edit distance',
col = colors,
pch = 19,
yaxt = 'n'
)
axis(1, at = 1:8, labels = strains)
axis(2, at = -2:2)
par(grid)
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
ls()
infima
runApp('~/Documents/GitHub/INFIMA-shiny')
?icon
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
ls()
prior
input_queries_small[[1]]
prior
input_queries_small[[1]]$genotype
as.data.frame(input_queries_small[[1]]$genotype)
as.data.frame(t(input_queries_small[[1]]$genotype))
runApp('~/Documents/GitHub/INFIMA-shiny')
?tableOutput
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
?axis
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
prior
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
?renderImage
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
ls()
prior
prior
x <- prior[1,]
rankscore <- as.vector(x[, c('cor.A.E.rs', 'cor.A.B.rs', 'footprint.rs', 'dist.rs')])
rankscore
rankscore <- sort(rankscore)
rankscore
barplot(rankscore)
barplot(names(rankscore), rankscore)()
barplot(names(rankscore), rankscore)
?barplot
barplot(rankscore)
rankscore
rankscore <- as.vector(x[, c('cor.A.E.rs', 'cor.A.B.rs', 'footprint.rs', 'dist.rs')])
rankscore <- sort(rankscore)
rankscore
is.vector(rankscore)
rankscore <- x[, c('cor.A.E.rs', 'cor.A.B.rs', 'footprint.rs', 'dist.rs')]
rankscore <- as.vector(sort(rankscore))
rankscoroe
rankscore
as.vector(rankscore)
as.numeric(rankscore)
rankscore <- as.numeric(x[, c('cor.A.E.rs', 'cor.A.B.rs', 'footprint.rs', 'dist.rs')])
labels <- c('cor.A.E.rs', 'cor.A.B.rs', 'footprint.rs', 'dist.rs')
rankscore
names(rankscore) <- labels
rankscore <- sort(rankscore)
rankscore
barplot(rankscore)
?barplot
barplot(rankscore, xlab = 'Prior components', ylab = 'Rank score')
barplot(rankscore,
xlab = 'Prior components',
ylab = 'Rank score',
main = 'Contribution of prior components')
rankscore <- as.numeric(x[, c('cor.A.E.rs', 'cor.A.B.rs', 'footprint.rs', 'dist.rs')])
labels <- c('|cor(A,E)|', '|cor(A,B)|', 'footprint', 'distance')
names(rankscore) <- labels
rankscore <- sort(rankscore)
barplot(rankscore,
xlab = 'Prior components',
ylab = 'Rank score',
main = 'Contribution of prior components')
prior
bp <- barplot(rankscore,
xlab = 'Prior components',
ylab = 'Rank score',
main = 'Contribution of prior components')
bp
names(rankscore)
rankscore <- as.numeric(x[, c('cor.A.E.rs', 'cor.A.B.rs', 'footprint.rs', 'dist.rs')])
realscore <- as.numeric(x[, c('cor.A.E', 'cor.A.B', 'footprint', 'dist')])
label <- c('|cor(A,E)|', '|cor(A,B)|', 'footprint', 'distance')
df <- data.frame(rankscore = rankscore,
realscore = realscore,
label = label)
df
df <- df[order(df$rankscore)]
df <- df[order(df$rankscore),]
df
x
bp <- barplot(df$rankscore, df$label,
xlab = 'Prior components',
ylab = 'Rank score',
main = 'Contribution of prior components')
rankscore <- df$rankscore
names(rankscore) <- df$label
bp <- barplot(rankscore,
xlab = 'Prior components',
ylab = 'Rank score',
main = 'Contribution of prior components')
text(bp, rankscore + 0.1, labels = df$label )
text(bp, rankscore + 0.1, labels = realscore )
bp <- barplot(rankscore,
xlab = 'Prior components',
ylab = 'Rank score',
main = 'Contribution of prior components')
realscore <- df$realscore
text(bp, rankscore + 0.1, labels = realscore )
text(bp, rankscore - 0.1, labels = realscore )
text(bp, rankscore - 0.1, labels = format(realscore, nsmall = 2) )
bp <- barplot(rankscore,
xlab = 'Prior components',
ylab = 'Rank score',
main = 'Contribution of prior components')
realscore <- df$realscore
text(bp, rankscore - 0.1, labels = format(realscore, nsmall = 2) )
text(bp, rankscore - 0.1, labels = format(round(realscore, 2), nsmall = 2) )
bp <- barplot(rankscore,
xlab = 'Prior components',
ylab = 'Rank score',
main = 'Contribution of prior components')
realscore <- df$realscore
text(bp, rankscore - 0.1, labels = format(round(realscore, 2), nsmall = 2) )
text(bp, 0.1, labels = format(round(realscore, 2), nsmall = 2) )
text(bp, 0, labels = format(round(realscore, 2), nsmall = 2) )
text(bp, 0.1, labels = format(round(realscore, 2), nsmall = 2) )
bp <- barplot(rankscore,
xlab = 'Prior components',
ylab = 'Rank score',
main = 'Contribution of prior components\n (true scores in brackets)')
realscore <- df$realscore
text(bp, 0.1, labels = paste0('(', format(round(realscore, 2), nsmall = 2), ')'))
bp <- barplot(rankscore,
xlab = 'Prior components',
ylab = 'Rank score',
main = 'Contribution of prior components\n (original scores in brackets)')
realscore <- df$realscore
text(bp, 0.1, labels = paste0('(', format(round(realscore, 2), nsmall = 2), ')'))
rankscore <- as.numeric(x[, c('cor.A.E.rs', 'cor.A.B.rs', 'footprint.rs', 'dist.rs')])
realscore <- as.numeric(x[, c('cor.A.E', 'cor.A.B', 'footprint', 'dist')])
label <- c('cor(A,E)', 'cor(A,B)', 'footprint', 'distance')
df <- data.frame(rankscore = rankscore,
realscore = realscore,
label = label)
df <- df[order(df$rankscore),]
rankscore <- df$rankscore
names(rankscore) <- df$label
bp <- barplot(rankscore,
xlab = 'Prior components',
ylab = 'Rank score',
main = 'Contribution of prior components\n (original values in brackets)')
realscore <- df$realscore
text(bp, 0.1, labels = paste0('(', format(round(realscore, 2), nsmall = 2), ')'))
runApp('~/Documents/GitHub/INFIMA-shiny')
bp <- barplot(rankscore,
xlab = 'Prior components',
ylab = 'Rank score',
main = 'Contribution of prior components\n (original values in brackets)',
ylim = c(0,1),
xaxt = 'n')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
?DT::datatable
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
?renderDataTable
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
prior
runApp('~/Documents/GitHub/INFIMA-shiny')
prior
prior[1]
prior[1][, c('p', 'k', 'Z', 'Z.rs')]
prior_selected <- prior[1]
pprob_data <- prior_selected[, c('p', 'k', 'Z', 'Z.rs')]
colnames(pprob_data) <- c('Total # of candidates',
'Candidates in the credible set',
'Posterior probability',
'Posterior probability (rank score)')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
?INFIMA
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
?panel_div
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
runApp('~/Documents/GitHub/INFIMA-shiny')
input_queries_small[[1]]
input_queries_small[[1]]$genotype
as.data.frame(t(input_queries_small[[1]]$genotype))
strains
strains
ls()
runApp('~/Documents/GitHub/INFIMA-shiny')
rm(list = ls())
ls()
library(devtools)
document()
getwd()
getwd()
library(devtools)
document()
document()
?INFIMA
#### Fig. 2 (f) ####
# PIQ footprint analysis for ATAC-seq peaks #
rm(list = ls())
library(data.table)
load('~/Documents/AlanAttie4/PIQ/dt-PIQ-enrichment-analysis.RData')
dt <- dt[is.human | is.mouse] # 744
dt <- dt[nFp > 0 & nMotif > 0] # remove 2 motifs without footprints
dt$motif.name <- dt$label
dt$motif <- paste0(dt$motif, ';', dt$motif.name)
dt$label <- sapply(strsplit(dt$label,'_'), function(x) x[1])
dt
dt[motif.name %in% c('Pdx1', 'Mnx1', 'NFATC2')]
dt[motif.name %in% c('Pdx1', 'Mnx1', 'NFATC2')]$nFp.peak
mean(dt[motif.name %in% c('Pdx1', 'Mnx1', 'NFATC2')]$nFp.peak)
dt
dt[type == 'beta']
dt[type == 'both']
table(dt$type)
dt[type %in% c('beta', 'islet')]
dt[type %in% c('beta', 'islet')][! motif.name %in% c('Pdx1', 'Mnx1', 'NFATC2')]
dt[type %in% c('beta', 'islet')][! motif.name %in% c('Pdx1', 'Mnx1', 'NFATC2', 'CTCF')]
dt[type %in% c('beta', 'islet')][! motif.name %in% c('Pdx1', 'Mnx1', 'NFATC2', 'CTCF')]$nFp.peak
mean(dt[type %in% c('beta', 'islet')][! motif.name %in% c('Pdx1', 'Mnx1', 'NFATC2', 'CTCF')]$nFp.peak)
rm(list = ls())
library(data.table)
library(pheatmap)
library(grid)
library(RColorBrewer)
setwd('~/Documents/INFIMA-manuscript/Figure3/Figure3-heatmap/')
load('~/Documents/AlanAttie4/PIQ/dt-PIQ-enrichment-analysis.RData')
dt <- dt[is.human | is.mouse] # 744
dt <- dt[nFp > 0 & nMotif > 0] # remove 2 motifs without footprints
dt$motif.name <- dt$label
dt$motif <- paste0(dt$motif, ';', dt$motif.name)
dt$label <- sapply(strsplit(dt$label,'_'), function(x) x[1])
dt[label == 'NFATC2']$type <- 'beta'
dt[label == 'CTCF']$type <- 'other'
dt$type <- as.character(dt$type)
dt[type == 'alpha']$type <- 'alpha-cell'
dt[type == 'beta']$type <- 'beta-cell'
dt[type == 'islet']$type <- 'alpha & beta'
dt$type <- factor(dt$type, levels = c('alpha-cell','beta-cell','alpha & beta','other'))
table(dt$type)
load('~/Documents/AlanAttie4/atSNP/run080519/snpMotifMat.RData')
load('~/Documents/AlanAttie4/atSNP/run080519/atsnp.final.RData')
# 1350 SNPs vs 1196 motifs
dt2 <- dt[type != 'other']
ind <- match(dt2$motif, colnames(snpMotifMat))
dt2 <- dt2[!is.na(ind)]
ind <- ind[!is.na(ind)]
snpMotifMat.islet <- snpMotifMat[, ind]
snpMotifMat.islet <- snpMotifMat.islet[rowSums(snpMotifMat.islet != 0) > 0,]
dim(snpMotifMat.islet[rowSums(snpMotifMat.islet) > 0,]) # 21 SNPs involve in enhancing
dim(snpMotifMat.islet[rowSums(snpMotifMat.islet) < 0,]) # 41 SNPs involve in disrupting
snpMotifMat.islet <- rbind(snpMotifMat.islet[rowSums(snpMotifMat.islet) > 0,],
snpMotifMat.islet[rowSums(snpMotifMat.islet) < 0,])
mat <- as.data.table(melt(snpMotifMat.islet))
mat <- mat[value != 0]
colnames(mat) <- c('snp','motif','fpd') # 82 interaction cases
mat$type <- dt2[match(mat$motif, dt2$motif)]$type
mat$type <- factor(mat$type,
levels = c('alpha-cell', 'beta-cell', 'alpha & beta'),
ordered = T,
labels = c(expression(paste(alpha, '-cells')),
expression(paste(beta, '-cells')),
expression(paste(alpha, ' & ', beta))))
##### row clustering orders
row1 <- hclust(dist(snpMotifMat.islet[rowSums(snpMotifMat.islet) > 0,]))
row2 <- hclust(dist(snpMotifMat.islet[rowSums(snpMotifMat.islet) < 0,]))
mat$change <- ifelse(mat$snp %in% row1$labels, 'Enhance', 'Disrupt')
mat$snp <- factor(mat$snp, levels = c(row1$labels, row2$labels))
##### col clustering orders
col1.select <- colnames(snpMotifMat.islet) %in% dt2[type == 'alpha-cell']$motif
col1 <- hclust(dist(t(snpMotifMat.islet[, col1.select])))
col2.select <- colnames(snpMotifMat.islet) %in% dt2[type == 'beta-cell']$motif
col2 <- hclust(dist(t(snpMotifMat.islet[, col2.select])))
col3.select <- colnames(snpMotifMat.islet) %in% dt2[type == 'alpha & beta']$motif
col3 <- hclust(dist(t(snpMotifMat.islet[, col3.select])))
mat$motif <- factor(mat$motif, levels = c(col1$labels, col2$labels, col3$labels))
##### get pval_rank and pval_fpd for each SNP * motif pair
tmp <- atsnp.final[match(paste(mat$snp, mat$motif), paste(atsnp.final$snpid, atsnp.final$motif))]
mat$pval_rank <- tmp$pval_rank
mat$pval_fpd <- tmp$pval_fpd
mat$size <- -log10(mat$pval_rank)
mat$delta_fpd <- -log10(mat$pval_fpd)*ifelse(mat$change == 'Enhance', -1, 1)
mat
mat$snp
length(unique(mat$snp))
mean(c(1405,430,813))
