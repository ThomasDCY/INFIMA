Z.g[[g]] <- Z.g[[g]] / (sum(Z.g[[g]]) + prob.null)
}
}
# M-step
for (g in 1:G) {
if (p.g[g] > 0) {
V.g[g] <- sum(Z.g[[g]])
theta.g[[g]] <- PI[[g]] + Z.g[[g]] * V.g[g]
theta.g[[g]] <- theta.g[[g]] / sum(theta.g[[g]])
N0[g] <- sum(Z.g[[g]] * n0[[g]]) + lambda_0 * p.g[g]
N1[g] <- sum(Z.g[[g]] * n1[[g]]) + lambda_1 * p.g[g]
N2[g] <- sum(Z.g[[g]] * n2[[g]]) + lambda_2 * p.g[g]
M0[g] <- sum(Z.g[[g]] * m0[[g]]) + lambda_0 * p.g[g]
M1[g] <- sum(Z.g[[g]] * m1[[g]]) + lambda_1 * p.g[g]
M2[g] <- sum(Z.g[[g]] * m2[[g]]) + lambda_2 * p.g[g]
}
}
alpha <- c(sum(N0 * V.g), sum(N1 * V.g), sum(N2 * V.g))
beta <- c(sum(M0 * V.g), sum(M1 * V.g), sum(M2 * V.g))
alpha <- alpha / sum(alpha)
beta <- beta / sum(beta)
alpha.0 <-
c(sum(N00 * (1 - V.g)), sum(N01 * (1 - V.g)), sum(N02 * (1 - V.g)))
beta.0 <-
c(sum(M00 * (1 - V.g)), sum(M01 * (1 - V.g)), sum(M02 * (1 - V.g)))
alpha.0 <- alpha.0 / sum(alpha.0)
beta.0 <- beta.0 / sum(beta.0)
gamma <- mean(V.g)
print(em.iter)
print(sprintf('alpha = %.2f, %.2f, %.2f', alpha[1], alpha[2], alpha[3]))
print(sprintf('beta = %.2f, %.2f, %.2f', beta[1], beta[2], beta[3]))
print(sprintf('alpha.0 = %.2f, %.2f, %.2f', alpha.0[1], alpha.0[2], alpha.0[3]))
print(sprintf('beta.0 = %.2f, %.2f, %.2f', beta.0[1], beta.0[2], beta.0[3]))
print(sprintf('gamma = %.2f', gamma))
if (sum((alpha.prev - alpha) ^ 2) + sum((beta.prev - beta) ^ 2) < 1e-6) {
break
}
alpha.prev <- alpha
beta.prev <- beta
}
params <- list(
alpha = alpha,
beta = beta,
alpha.0 = alpha.0,
beta.0 = beta.0,
gamma = gamma,
em.iter = em.iter,
V.g = V.g,
Z.g = Z.g
)
return(params)
}
infima <- model_fitting(model_data, pseudocount)
infima$alpha
infima$beta
infima$alpha.0
infima$beta.0
infima$gamma
infima$em.iter
infima$V.g
head(infima$Z.g)
library(devtools)
document()
library(data.table)
library(GenomicAlignments)
document()
use_package('data.table')
use_package('GenomicAlignments')
detectCores()
document()
document()
document()
getwd()
document()
load_all()
load_all()
document()
library(INFIMA)
ls()
?model_fitting
sessionInfo()
library(INFIMA)
filename1 <- '~/Documents/GitHub/INFIMA/data/input1-chr1.csv'
filename2 <- '~/Documents/GitHub/INFIMA/data/input2-chr1.csv'
filename3 <- '~/Documents/GitHub/INFIMA/data/input3-chr1.csv'
raw_data <- raw_input_data(filename1, filename2, filename3)
?input_preparation
?raw_input_data
?INFIMA
?data.table
?raw_input_data
?input_preparation
library(INFIMA)
?raw_input_data
?model_fitting
load_all()
?raw_input_data
?model_input_data
?raw_input_data
load_all()
document()
?raw_input_data
fread('sldkfjlsdkjf')
document()
?raw_input_data
?is.data.frame
document()
?raw_input_data
document()
?raw_input_data
document()
?raw_input_data
filename1
system.file()
system.file(package = 'INFIMA')
dt1 <- fread(filename1)
dt2 <- fread(filename2)
dt3 <- fread(filename3)
dt1 <- dt1[1:10]
dt2 <- dt2[1:10]
dt1
save(dt1, dt2, dt3, file = 'data/example-10-genes.rda')
load_all()
load_all()
library(INFIMA)
data("example-10-genes")
data("example-10-genes")
raw_data <- raw_input_data(dt1, dt2, dt3)
dt1
is.data.frame(dt1)
is.data.table(dt1)
refcols1 <- c(
'ensembl',
'symbol',
'chr',
'start',
'end',
'strand',
'qtl_marker',
'qtl_chr',
'qtl_pos',
'lod',
strains
)
strains <-
c('129', 'AJ', 'B6', 'Cast', 'NOD', 'NZO', 'PWK', 'WSB')
refcols1 <- c(
'ensembl',
'symbol',
'chr',
'start',
'end',
'strand',
'qtl_marker',
'qtl_chr',
'qtl_pos',
'lod',
strains
)
if (any((refcols1 %in% colnames(dt1)) == FALSE)) {
stop(paste(
'Error: column(s)',
paste(refcols1[which(!refcols1 %in% colnames(dt1))], collapse = ', '),
'are missing in the first input file!'
))
}
dt2
load_all()
document()
?raw_input_data
data("example-10-genes")
raw_data <- raw_input_data(dt1, dt2, dt3)
str(raw_data)
document()
?raw_input_data
check()
load_all()
load_all()
?shift
load_all()
test()
load_all()
sessionInfo()
library(devtools)
load_all()
document()
load_all()
document()
?compute_pseudocount
document()
?data_trinarize
document()
?model_input_data
document()
?model_input_data
document()
?model_input_data
document()
?model_input_data
document()
?model_input_data
document()
?model_input_data
document()
document()
document()
document()
?compute_pseudocount
document()
?model_input_data
document()
?compute_pseudocount
?INFIMA
load_all()
library(INFIMA)
data("example-10-genes")
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
document()
load_all
load_all()
document()
load_all()
library(INFIMA)
data("example-10-genes")
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
?IRanges
document()
document()
document()
data("example-10-genes")
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
?subjectHits
?import
document()
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
pseudocount <- compute_pseudocount(raw_data, model_data)
document()
model_data <- model_input_data(raw_data)
load_all()
model_data <- model_input_data(raw_data)
model_data <- model_input_data(raw_data)
load_all()
model_data <- model_input_data(raw_data)
documents()
document()
load_all()
model_data <- model_input_data(raw_data)
load_all()
model_data <- model_input_data(raw_data)
sessionInfo()
model_data <- model_input_data(raw_data)
raw_data$snpData
load_all()
model_data <- model_input_data(raw_data)
?subjectHits
library(GenomicRanges)
?GRanges
document()
model_data <- model_input_data(raw_data)
model_data$E.g
pseudocount <- compute_pseudocount(raw_data, model_data)
pseudocount$PI
document()
?model_fitting
document()
load_all()
data("example-10-genes")
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
pseudocount <- compute_pseudocount(raw_data, model_data)
infima <- model_fitting(model_data, pseudocount)
infima <- model_fitting(model_data, pseudocount, verbose = F)
infima <- model_fitting(model_data, pseudocount, verbose = T)
infima$V.g
infima$Z.g
?raw_data_input
?raw_input_data
class(infima)
class(infima) <- 'infima'
class(infima)
inherits(infima, 'dt')
inherits(infima, 'infima')
library(devtools)
load_all()
load_all()
?model_fitting
data('example-10-genes')
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
pseudocount <- compute_pseudocount(raw_data, model_data)
infima <- model_fitting(model_data, pseudocount)
str(infima)
infima$V.g
class(infima)
class(infima) == 'list'
ls()
dt1
dt2
dt3
str(model_data)
V.g <- infima$V.g
# consider V.g >= tau as causal
direct.pprob <- function(p, fdr = 0.1){
err <- 1 - p # the error rate
err <- sort(err) # ascending order
tau <- 1 - err[max(which( (cumsum(err)/1:length(err) <= fdr) == 1 ))]
return(tau)
}
tau <- direct.pprob(V.g)
tau
cum.pprob <- 0.85 # cumulative pprob
cred.set <- 0.5 # the maximum proportion of candidates in credible sets
dt3
nrow(dt3)
# for each local-ATAC-QTL (34711 in total), we record all the genes it is affecting based on INFIMA.
# We are keeping track of the do.eqtl index, 10119 rows in total
snps.link.gene <- vector('list', nrow(dt3)) # number of SNPs
Z.g <- infima$Z.g
cum.pprob <- 0.85 # cumulative pprob
cred.set <- 0.5 # the maximum proportion of candidates in credible sets
for(x in 1:length(Z.g)){
print(x)
if(V.g[x] >= tau){
# remain top k snps as causal
k <- max(2, floor(length(Z.g[[x]]) * cred.set)+1)
k <- min(k, length(Z.g[[x]]))
# check cumulative pprobs
if(k >= 2){
pprobs <- sort(Z.g[[x]], decreasing = T)
if(sum(Z.g[[x]]) > cum.pprob){
k <- min(k, which(cumsum(pprobs) >= cum.pprob)[1])
}
}
ranks <- rank(Z.g[[x]], ties.method = 'random')
cutoff <- Z.g[[x]][ranks == length(Z.g[[x]])-k+1]
causal <- snp_index[[x]][Z.g[[x]] >= cutoff]
for(i in 1:length(causal)){
snps.link.gene[[causal[i]]] <- c(snps.link.gene[[causal[i]]], x)
}
}
}
snp_index <- model_data$snp_index
length(snp_index)
for(x in 1:length(Z.g)){
print(x)
if(V.g[x] >= tau){
# remain top k snps as causal
k <- max(2, floor(length(Z.g[[x]]) * cred.set)+1)
k <- min(k, length(Z.g[[x]]))
# check cumulative pprobs
if(k >= 2){
pprobs <- sort(Z.g[[x]], decreasing = T)
if(sum(Z.g[[x]]) > cum.pprob){
k <- min(k, which(cumsum(pprobs) >= cum.pprob)[1])
}
}
ranks <- rank(Z.g[[x]], ties.method = 'random')
cutoff <- Z.g[[x]][ranks == length(Z.g[[x]])-k+1]
causal <- snp_index[[x]][Z.g[[x]] >= cutoff]
for(i in 1:length(causal)){
snps.link.gene[[causal[i]]] <- c(snps.link.gene[[causal[i]]], x)
}
}
}
snps.link.gene
###### Figure 1
# eQTL plot for Capsl
library(data.table)
library(ggplot2)
library(cowplot)
rm(list = ls())
setwd('~/Documents/INFIMA-manuscript/Figure1/')
dt <- fread('~/Documents/AlanAttie4/examples/ABCC8/ENSMUSG00000040136_EFFECT.csv')
chr <- paste0('chr',dt$chr[1])
colnames(dt) <- c('id', 'chr', 'pos',
'AJ', 'B6', '129', 'NOD', 'NZO', 'Cast', 'PWK', 'WSB',
'lod')
dt2 <- melt(dt, id.vars = c('id', 'chr', 'pos', 'lod'))
colnames(dt2) <- c('id', 'chr', 'pos', 'lod', 'Strain', 'AlleleEffect')
# color scheme for all 8 strains
strains <- c('129','AJ','B6','Cast','NOD','NZO','PWK','WSB')
colors <- c(rgb(240, 128, 128, maxColorValue = 255, alpha = 255),
rgb(218, 165, 32, maxColorValue = 255, alpha = 255),
rgb(128, 128, 128, maxColorValue = 255, alpha = 255),
rgb(0, 160, 0, maxColorValue = 255, alpha = 255),
rgb(16, 16, 240, maxColorValue = 255, alpha = 255),
rgb(0, 160, 240, maxColorValue = 255, alpha = 255),
rgb(240, 0, 0, maxColorValue = 255, alpha = 255),
rgb(144, 0, 224, maxColorValue = 255, alpha = 255))
dt2$Strain <- factor(dt2$Strain, levels = strains)
dt2$Wild <- ifelse(dt2$Strain %in% c('Cast', 'PWK', 'WSB'), 'wild', 'normal')
dt2$Wild <- factor(dt2$Wild, levels = c('normal', 'wild'))
lod.max.pos <- dt[which.max(lod)]$pos
g1 <- ggplot(dt2, aes(x = pos, y = lod)) +
geom_line(size = 1.2) + theme_classic() +
labs(x = paste(chr,'(Mbp)'), y = 'LOD score') +
geom_vline(xintercept = lod.max.pos, lty = 2) +
xlim(c(min(dt2$pos), max(dt2$pos)))
# pdf('Figure1A.pdf', width = 5, height = 1.5)
# g1
# dev.off()
g2 <- ggplot(dt2, aes(x = pos, y = AlleleEffect, color = Strain)) +
geom_line(aes(size = Wild)) + theme_classic() +
scale_color_manual(values = colors) +
scale_size_manual(values = c(0.8, 1.2)) +
theme(legend.position = 'none') +
labs(x = paste(chr,'(Mbp)'), y = 'Allele effects') +
geom_vline(xintercept = lod.max.pos, lty = 2) +
xlim(c(min(dt2$pos), max(dt2$pos)))
g2
# pdf('Figure1B.pdf', width = 5, height = 3)
# g2
# dev.off()
g3 <- ggplot(dt2[abs(pos - lod.max.pos) <= 1], aes(x = pos, y = lod)) +
ylim(c(0,max(dt2$lod))) + geom_line(color = 'grey20') + geom_point(size = 0.5) +
labs(x = paste(chr,'(Mbp)'), y = 'LOD score') + theme_grey() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.border = element_rect(linetype = "solid", fill = NA))
# pdf('Figure1C.pdf', width = 5, height = 1.5)
# g3
# dev.off()
pdf('Figure1.pdf', width = 5, height = 6)
plot_grid(g1, g2, g3, align = "v", ncol = 1, rel_heights = c(1, 2, 1))
dev.off()
###### Figure 1
# eQTL plot for Capsl
library(data.table)
library(ggplot2)
library(cowplot)
rm(list = ls())
setwd('~/Documents/INFIMA-manuscript/Figure1/')
dt <- fread('~/Documents/AlanAttie4/examples/ABCC8/ENSMUSG00000040136_EFFECT.csv')
chr <- paste0('chr',dt$chr[1])
colnames(dt) <- c('id', 'chr', 'pos',
'AJ', 'B6', '129', 'NOD', 'NZO', 'Cast', 'PWK', 'WSB',
'lod')
dt2 <- melt(dt, id.vars = c('id', 'chr', 'pos', 'lod'))
colnames(dt2) <- c('id', 'chr', 'pos', 'lod', 'Strain', 'AlleleEffect')
# color scheme for all 8 strains
strains <- c('129','AJ','B6','Cast','NOD','NZO','PWK','WSB')
colors <- c(rgb(240, 128, 128, maxColorValue = 255, alpha = 255),
rgb(218, 165, 32, maxColorValue = 255, alpha = 255),
rgb(128, 128, 128, maxColorValue = 255, alpha = 255),
rgb(0, 160, 0, maxColorValue = 255, alpha = 255),
rgb(16, 16, 240, maxColorValue = 255, alpha = 255),
rgb(0, 160, 240, maxColorValue = 255, alpha = 255),
rgb(240, 0, 0, maxColorValue = 255, alpha = 255),
rgb(144, 0, 224, maxColorValue = 255, alpha = 255))
dt2$Strain <- factor(dt2$Strain, levels = strains)
dt2$Wild <- ifelse(dt2$Strain %in% c('Cast', 'PWK', 'WSB'), 'wild', 'normal')
dt2$Wild <- factor(dt2$Wild, levels = c('normal', 'wild'))
lod.max.pos <- dt[which.max(lod)]$pos
g1 <- ggplot(dt2, aes(x = pos, y = lod)) +
geom_line(size = 1.2) + theme_classic() +
labs(x = paste(chr,'(Mbp)'), y = 'LOD score') +
geom_vline(xintercept = lod.max.pos, lty = 2) +
xlim(c(min(dt2$pos), max(dt2$pos)))
# pdf('Figure1A.pdf', width = 5, height = 1.5)
# g1
# dev.off()
g2 <- ggplot(dt2, aes(x = pos, y = AlleleEffect, color = Strain)) +
geom_line(aes(size = Wild)) + theme_classic() +
scale_color_manual(values = colors) +
scale_size_manual(values = c(0.8, 1.2)) +
theme(legend.position = 'none') +
labs(x = paste(chr,'(Mbp)'), y = 'Allele effects') +
geom_vline(xintercept = lod.max.pos, lty = 2) +
xlim(c(min(dt2$pos), max(dt2$pos)))
g2
# pdf('Figure1B.pdf', width = 5, height = 3)
# g2
# dev.off()
g3 <- ggplot(dt2[abs(pos - lod.max.pos) <= 1], aes(x = pos, y = lod)) +
ylim(c(0,max(dt2$lod))) + geom_line(color = 'grey20') + geom_point(size = 0.5) +
labs(x = paste(chr,'(Mbp)'), y = 'LOD score') + theme_grey() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.border = element_rect(linetype = "solid", fill = NA))
# pdf('Figure1C.pdf', width = 5, height = 1.5)
# g3
# dev.off()
pdf('Figure1.pdf', width = 5, height = 6)
plot_grid(g1, g2, g3, align = "v", ncol = 1, rel_heights = c(1, 2, 1), labels = c('a','b','c'))
dev.off()
setwd('~/Documents/AlanAttie4/hg19-mm10/main/')
load('validation.RData')
library(data.table)
ls()
gwas.peak
gwas.df
snp.list <- gwas.df$Name
head(snp.list)
getwd()
snp.list <- data.table(snp = gwas.df$Name)
snp.list
write.table(snp.list, row.names = F, col.names = F, quote = F, sep = '\t',
file = 'snp.list.txt')
snp.list <- data.table(snp = unique(gwas.df$Name))
snp.list
write.table(snp.list, row.names = F, col.names = F, quote = F, sep = '\t',
file = 'snp.list.txt')
