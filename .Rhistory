xlim(c(min(dt2$pos), max(dt2$pos)))
g2
# pdf('Figure1B.pdf', width = 5, height = 3)
# g2
# dev.off()
g3 <- ggplot(dt2[abs(pos - lod.max.pos) <= 1], aes(x = pos, y = lod)) +
ylim(c(0,max(dt2$lod))) + geom_line(color = 'grey20') + geom_point(size = 0.5) +
labs(x = paste(chr,'(Mbp)'), y = 'LOD score') + theme_grey() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.border = element_rect(linetype = "solid", fill = NA))
# pdf('Figure1C.pdf', width = 5, height = 1.5)
# g3
# dev.off()
pdf('Figure1.pdf', width = 5, height = 6)
plot_grid(g1, g2, g3, align = "v", ncol = 1, rel_heights = c(1, 2, 1))
dev.off()
###### Figure 1
# eQTL plot for Capsl
library(data.table)
library(ggplot2)
library(cowplot)
rm(list = ls())
setwd('~/Documents/INFIMA-manuscript/Figure1/')
dt <- fread('~/Documents/AlanAttie4/examples/ABCC8/ENSMUSG00000040136_EFFECT.csv')
chr <- paste0('chr',dt$chr[1])
colnames(dt) <- c('id', 'chr', 'pos',
'AJ', 'B6', '129', 'NOD', 'NZO', 'Cast', 'PWK', 'WSB',
'lod')
dt2 <- melt(dt, id.vars = c('id', 'chr', 'pos', 'lod'))
colnames(dt2) <- c('id', 'chr', 'pos', 'lod', 'Strain', 'AlleleEffect')
# color scheme for all 8 strains
strains <- c('129','AJ','B6','Cast','NOD','NZO','PWK','WSB')
colors <- c(rgb(240, 128, 128, maxColorValue = 255, alpha = 255),
rgb(218, 165, 32, maxColorValue = 255, alpha = 255),
rgb(128, 128, 128, maxColorValue = 255, alpha = 255),
rgb(0, 160, 0, maxColorValue = 255, alpha = 255),
rgb(16, 16, 240, maxColorValue = 255, alpha = 255),
rgb(0, 160, 240, maxColorValue = 255, alpha = 255),
rgb(240, 0, 0, maxColorValue = 255, alpha = 255),
rgb(144, 0, 224, maxColorValue = 255, alpha = 255))
dt2$Strain <- factor(dt2$Strain, levels = strains)
dt2$Wild <- ifelse(dt2$Strain %in% c('Cast', 'PWK', 'WSB'), 'wild', 'normal')
dt2$Wild <- factor(dt2$Wild, levels = c('normal', 'wild'))
lod.max.pos <- dt[which.max(lod)]$pos
g1 <- ggplot(dt2, aes(x = pos, y = lod)) +
geom_line(size = 1.2) + theme_classic() +
labs(x = paste(chr,'(Mbp)'), y = 'LOD score') +
geom_vline(xintercept = lod.max.pos, lty = 2) +
xlim(c(min(dt2$pos), max(dt2$pos)))
# pdf('Figure1A.pdf', width = 5, height = 1.5)
# g1
# dev.off()
g2 <- ggplot(dt2, aes(x = pos, y = AlleleEffect, color = Strain)) +
geom_line(aes(size = Wild)) + theme_classic() +
scale_color_manual(values = colors) +
scale_size_manual(values = c(0.8, 1.2)) +
theme(legend.position = 'none') +
labs(x = paste(chr,'(Mbp)'), y = 'Allele effects') +
geom_vline(xintercept = lod.max.pos, lty = 2) +
xlim(c(min(dt2$pos), max(dt2$pos)))
g2
# pdf('Figure1B.pdf', width = 5, height = 3)
# g2
# dev.off()
g3 <- ggplot(dt2[abs(pos - lod.max.pos) <= 1], aes(x = pos, y = lod)) +
ylim(c(0,max(dt2$lod))) + geom_line(color = 'grey20') + geom_point(size = 0.5) +
labs(x = paste(chr,'(Mbp)'), y = 'LOD score') + theme_grey() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.border = element_rect(linetype = "solid", fill = NA))
# pdf('Figure1C.pdf', width = 5, height = 1.5)
# g3
# dev.off()
pdf('Figure1.pdf', width = 5, height = 6)
plot_grid(g1, g2, g3, align = "v", ncol = 1, rel_heights = c(1, 2, 1), labels = c('a','b','c'))
dev.off()
setwd('~/Documents/AlanAttie4/hg19-mm10/main/')
load('validation.RData')
library(data.table)
ls()
gwas.peak
gwas.df
snp.list <- gwas.df$Name
head(snp.list)
getwd()
snp.list <- data.table(snp = gwas.df$Name)
snp.list
write.table(snp.list, row.names = F, col.names = F, quote = F, sep = '\t',
file = 'snp.list.txt')
snp.list <- data.table(snp = unique(gwas.df$Name))
snp.list
write.table(snp.list, row.names = F, col.names = F, quote = F, sep = '\t',
file = 'snp.list.txt')
getwd()
library(devtools)
load_all()
load_all()
data('example-10-genes')
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
pseudocount <- compute_pseudocount(raw_data, model_data)
infima <- model_fitting(model_data, pseudocount)
load_all()
data('example-10-genes')
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
pseudocount <- compute_pseudocount(raw_data, model_data)
infima <- model_fitting(model_data, pseudocount)
data('example-10-genes')
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
pseudocount <- compute_pseudocount(raw_data, model_data)
infima <- model_fitting(model_data, pseudocount)
model_data <- model_input_data(raw_data)
(.packages())
load_all()
model_data <- model_input_data(raw_data)
model_data <- model_input_data(raw_data)
load_all()
model_data <- model_input_data(raw_data)
document()
document()
load_all()
model_data <- model_input_data(raw_data)
document()
load_all()
model_data <- model_input_data(raw_data)
document()
load_all()
model_data <- model_input_data(raw_data)
document()
document()
document()
load_all()
model_data <- model_input_data(raw_data)
pseudocount <- compute_pseudocount(raw_data, model_data)
infima <- model_fitting(model_data, pseudocount)
dt3
#
#
# ind <- unlist(lapply(Z.g, function(x) length(x) > 1)) # 10119 rows left
# Z.g <- Z.g[ind]
# snp_index <- snp_index[ind]
# do.eqtl <- do.eqtl[ind]
# V.g <- unlist(lapply(Z.g, sum))
#
#
#
V.g <- infima$V.g
Z.g <- infima$Z.g
snp_index <- model_data$snp_index
# consider V.g >= tau as causal
direct.pprob <- function(p, fdr = 0.1){
err <- 1 - p # the error rate
err <- sort(err) # ascending order
tau <- 1 - err[max(which( (cumsum(err)/1:length(err) <= fdr) == 1 ))]
return(tau)
}
tau <- direct.pprob(V.g)
cum.pprob <- 0.85 # cumulative pprob
cred.set <- 0.5 # the maximum proportion of candidates in credible sets
nrow(dt3)
# for each local-ATAC-QTL (34711 in total), we record all the genes it is affecting based on INFIMA.
# We are keeping track of the do.eqtl index, 10119 rows in total
snps.link.gene <- vector('list', nrow(dt3)) # number of SNPs
for(x in 1:length(Z.g)){
print(x)
if(V.g[x] >= tau){
# remain top k snps as causal
k <- max(2, floor(length(Z.g[[x]]) * cred.set)+1)
k <- min(k, length(Z.g[[x]]))
# check cumulative pprobs
if(k >= 2){
pprobs <- sort(Z.g[[x]], decreasing = T)
if(sum(Z.g[[x]]) > cum.pprob){
k <- min(k, which(cumsum(pprobs) >= cum.pprob)[1])
}
}
ranks <- rank(Z.g[[x]], ties.method = 'random')
cutoff <- Z.g[[x]][ranks == length(Z.g[[x]])-k+1]
causal <- snp_index[[x]][Z.g[[x]] >= cutoff]
for(i in 1:length(causal)){
snps.link.gene[[causal[i]]] <- c(snps.link.gene[[causal[i]]], x)
}
}
}
head(snps.link.gene)
causal
snps.link.gene[[2350]]
ls()
dt1
dt3
dt1
# for each local-ATAC-QTL (34711 in total), we record all the genes it is affecting based on INFIMA.
# We are keeping track of the do.eqtl index, 10119 rows in total
res <- dt3[, snp_id:alt]
res$ensembl <- ''
res$symbol <- ''
res
res <- NULL
# snps.link.gene <- vector('list', nrow(dt3)) # number of SNPs
for(x in 1:length(Z.g)){
print(x)
if(V.g[x] >= tau){
# remain top k snps as causal
k <- max(2, floor(length(Z.g[[x]]) * cred.set)+1)
k <- min(k, length(Z.g[[x]]))
# check cumulative pprobs
if(k >= 2){
pprobs <- sort(Z.g[[x]], decreasing = T)
if(sum(Z.g[[x]]) > cum.pprob){
k <- min(k, which(cumsum(pprobs) >= cum.pprob)[1])
}
}
ranks <- rank(Z.g[[x]], ties.method = 'random')
cutoff <- Z.g[[x]][ranks == length(Z.g[[x]])-k+1]
causal <- snp_index[[x]][Z.g[[x]] >= cutoff]
for(i in 1:length(causal)){
# snps.link.gene[[causal[i]]] <- c(snps.link.gene[[causal[i]]], x)
snps.link.gene <- dt3[causal[i], snp_id:alt]
snps.link.gene$ensembl <- dt1$ensembl[x]
snps.link.gene$symbol <- dt1$symbol[x]
res <- rbind(res, snps.link.gene)
}
}
}
res
class(infima)
class(infima) <- 'infima'
class(infima)
class(infima) == 'infima'
class(infima) == 'infim'
str(raw_data)
ls()
dt2
res
ls()
rm(list = ls())
data('example-10-genes')
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
pseudocount <- compute_pseudocount(raw_data, model_data)
infima <- model_fitting(model_data, pseudocount)
effector_genes <- snp_link_gene(infima, model_data, fdr = 0.05, cum.prob = 0.8, cred.set = 0.5)
#' data('example-10-genes')
#' raw_data <- raw_input_data(dt1, dt2, dt3)
#' model_data <- model_input_data(raw_data)
#' pseudocount <- compute_pseudocount(raw_data, model_data)
#' infima <- model_fitting(model_data, pseudocount)
#' effector_genes <- snp_link_gene(infima, model_data, fdr = 0.05, cum.prob = 0.8, cred.set = 0.5)
#' @seealso \code{\link{model_fitting}}, \code{\link{model_input_data}}.
#' @author Chenyang Dong \email{cdong@stat.wisc.edu}
#' @rawNamespace import(data.table, except = shift)
#' @export
snp_link_gene <-
#' data('example-10-genes')
#' raw_data <- raw_input_data(dt1, dt2, dt3)
#' model_data <- model_input_data(raw_data)
#' pseudocount <- compute_pseudocount(raw_data, model_data)
#' infima <- model_fitting(model_data, pseudocount)
#' effector_genes <- snp_link_gene(infima, model_data, fdr = 0.05, cum.prob = 0.8, cred.set = 0.5)
#' @seealso \code{\link{model_fitting}}, \code{\link{model_input_data}}.
#' @author Chenyang Dong \email{cdong@stat.wisc.edu}
#' @rawNamespace import(data.table, except = shift)
#' @export
snp_link_gene <-
#' data('example-10-genes')
#' raw_data <- raw_input_data(dt1, dt2, dt3)
#' model_data <- model_input_data(raw_data)
#' pseudocount <- compute_pseudocount(raw_data, model_data)
#' infima <- model_fitting(model_data, pseudocount)
#' effector_genes <- snp_link_gene(infima, model_data, fdr = 0.05, cum.prob = 0.8, cred.set = 0.5)
#' @seealso \code{\link{model_fitting}}, \code{\link{model_input_data}}.
#' @author Chenyang Dong \email{cdong@stat.wisc.edu}
#' @rawNamespace import(data.table, except = shift)
#' @export
snp_link_gene <-
function(infima,
model_data,
fdr = 0.1,
cum.pprob = 0.8,
cred.set = 0.5) {
V.g <- infima$V.g
Z.g <- infima$Z.g
snp_index <- model_data$snp_index
# consider V.g >= tau as causal
direct.pprob <- function(p, fdr = 0.1) {
err <- 1 - p # the error rate
err <- sort(err) # ascending order
tau <-
1 - err[max(which((cumsum(err) / 1:length(err) <= fdr) == 1))]
return(tau)
}
tau <- direct.pprob(V.g)
#### direct pprob approach cutoff
cum.pprob <- 0.85 # cumulative pprob
cred.set <-
0.5 # the maximum proportion of candidates in credible sets
# for each local-ATAC-QTL, we record all the genes it is affecting based on INFIMA.
# We are keeping track of the do.eqtl gene
res <- NULL
# snps.link.gene <- vector('list', nrow(dt3)) # number of SNPs
for (x in 1:length(Z.g)) {
print(x)
if (V.g[x] >= tau) {
# remain top k snps as causal
k <- max(2, floor(length(Z.g[[x]]) * cred.set) + 1)
k <- min(k, length(Z.g[[x]]))
# check cumulative pprobs
if (k >= 2) {
pprobs <- sort(Z.g[[x]], decreasing = T)
if (sum(Z.g[[x]]) > cum.pprob) {
k <- min(k, which(cumsum(pprobs) >= cum.pprob)[1])
}
}
ranks <- rank(Z.g[[x]], ties.method = 'random')
cutoff <- Z.g[[x]][ranks == length(Z.g[[x]]) - k + 1]
causal <- snp_index[[x]][Z.g[[x]] >= cutoff]
for (i in 1:length(causal)) {
# snps.link.gene[[causal[i]]] <- c(snps.link.gene[[causal[i]]], x)
snps.link.gene <- dt3[causal[i], snp_id:alt]
snps.link.gene$ensembl <- dt1$ensembl[x]
snps.link.gene$symbol <- dt1$symbol[x]
res <- rbind(res, snps.link.gene)
}
}
}
return(res)
}
effector_genes <- snp_link_gene(infima, model_data, fdr = 0.05, cum.prob = 0.8, cred.set = 0.5)
effector_genes <- snp_link_gene(infima, model_data, fdr = 0.05, cum.pprob = 0.8, cred.set = 0.5)
effector_genes
document()
document()
test()
test()
detectCores()
library(doParallel)
icount(100)
getDoParWorkers()
registerDoParallel(cores=2)
foreach(i=1:3) %dopar% sqrt(i)
foreach(i=1:3) %dopar% {list(sqrt(i),i)}
detectCores()
tmp <- 1:9
foreach(i=1:9) %dopar% {tmp[i]}
foreach(i=1:9) %dopar% {tmp[9-i+1]}
ls()
#### Figure 5 (a) distance score plot
library(data.table)
library(ggplot2)
rm(list = ls())
setwd('~/Documents/INFIMA-manuscript/Figure5/')
x <- seq(0, 1, 0.01)
dist <- function(x){
if(x <= 0.25){
return(0.5)
}
else{
return(5/12/(10*x - 5/3))
}
}
dist <- Vectorize(dist)
y <- dist(x)
summary(y)
dt <- data.table(x = x,
y = y)
pdf('Figure5A-dist.pdf', width = 4, height = 1.7)
ggplot(dt, aes(x = x, y = y)) + geom_line(color = 'grey30', lwd = 1.5) + theme_bw() +
labs(x = 'Genomic distance (Mb)', y = 'Distance score')
dev.off()
###### Figure 5
# eQTL data illustration, the same code as Figure 1
library(data.table)
library(ggplot2)
library(cowplot)
rm(list = ls())
setwd('~/Documents/INFIMA-manuscript/Figure5/')
dt <- fread('~/Documents/INFIMA-manuscript/Figure1/obsolete/Capsl cis eQTL in DO islets.csv')
colnames(dt) <- c('id', 'chr', 'pos',
'AJ', 'B6', '129', 'NOD', 'NZO', 'Cast', 'PWK', 'WSB',
'lod')
dt2 <- melt(dt, id.vars = c('id', 'chr', 'pos', 'lod'))
colnames(dt2) <- c('id', 'chr', 'pos', 'lod', 'Strain', 'AlleleEffect')
# color scheme for all 8 strains
strains <- c('129','AJ','B6','Cast','NOD','NZO','PWK','WSB')
colors <- c(rgb(240, 128, 128, maxColorValue = 255, alpha = 255),
rgb(218, 165, 32, maxColorValue = 255, alpha = 255),
rgb(128, 128, 128, maxColorValue = 255, alpha = 255),
rgb(0, 160, 0, maxColorValue = 255, alpha = 255),
rgb(16, 16, 240, maxColorValue = 255, alpha = 255),
rgb(0, 160, 240, maxColorValue = 255, alpha = 255),
rgb(240, 0, 0, maxColorValue = 255, alpha = 255),
rgb(144, 0, 224, maxColorValue = 255, alpha = 255))
dt2$Strain <- factor(dt2$Strain, levels = strains)
dt2$Wild <- ifelse(dt2$Strain %in% c('Cast', 'PWK', 'WSB'), 'wild', 'normal')
dt2$Wild <- factor(dt2$Wild, levels = c('normal', 'wild'))
lod.max.pos <- dt[which.max(lod)]$pos
g2 <- ggplot(dt2, aes(x = pos, y = AlleleEffect, color = Strain)) +
geom_line(aes(size = Wild)) + theme_classic() +
scale_color_manual(values = colors) +
scale_size_manual(values = c(0.8, 1.2)) +
theme(legend.position = 'none',
axis.title.y = element_text(margin = margin(t = 0, r = 8, b = 0, l = 0))) +
labs(x = 'Chromosome (Mb)', y = 'Allele effects') +
geom_vline(xintercept = lod.max.pos, lty = 2)
g2
pdf('Figure5A-eQTL.pdf', width = 4, height = 2)
g2
dev.off()
###### Figure 8 a summary of the mapping between GWAS SNPs and local-ATAC-QTLs
rm(list = ls())
library(data.table)
library(ggplot2)
library(cowplot)
rm(list = ls())
setwd('~/Documents/INFIMA-manuscript/Figure8/FigureS8-conserve/')
load('FigureS8-conserve.RData')
annos.all <- c("Promoter", "5' UTR", "3' UTR", "Exon", "Intron", "Downstream", "Distal Intergenic")
colors <- c("dodgerblue3", "grey20", "grey45", "orange2", "green4", "purple4", "red3")
names(colors) <- annos.all
annos <- c("Intron", "Distal Intergenic", "Promoter", "Exon") # top 4 categories
###################### plot legend ########################
# i <- 1
# dt.tmp <- res.anno.list[[annos[i]]]$anno.mm10
# dt.tmp <- data.table(anno = names(dt.tmp),
#                  percent = round(dt.tmp/sum(dt.tmp)*100,2))
# dt.tmp <- dt.tmp[order(-percent)]
# dt.tmp$anno <- factor(dt.tmp$anno, levels = dt.tmp$anno)
# g <- ggplot(dt.tmp, aes(x = anno, y = percent, color = anno, fill = anno)) + geom_bar(stat = 'identity') + theme_classic()
# g <- g + labs(x = '', y = '', color = '', fill = '') + theme(axis.text.x = element_blank())
# g <- g + scale_color_manual(values = colors) + scale_fill_manual(values = colors)
# legend <- get_legend(g)
# pdf('Figure8A-legend.pdf')
# grid.draw(get_legend(g))
# dev.off()
# plot_grid(legend, legend)
###################### plot right ########################
figs <- vector('list',length(annos)-1)
for(i in 1:(length(annos)-1)){
dt.tmp <- res.anno.list[[annos[i]]]$anno.mm10
dt.tmp <- data.table(anno = names(dt.tmp),
percent = round(dt.tmp/sum(dt.tmp)*100,2))
dt.tmp <- dt.tmp[order(-percent)]
dt.tmp$anno <- factor(dt.tmp$anno, levels = dt.tmp$anno)
g <- ggplot(dt.tmp, aes(x = anno, y = percent, color = anno, fill = anno)) + geom_bar(stat = 'identity') + theme_classic()
g <- g + labs(x = '', y = '', color = '', fill = '') +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "none",
axis.line.x = element_blank(),
axis.line.y = element_blank(),
panel.background = element_rect(fill = "white", colour = "black", size = 1))
g <- g + scale_color_manual(values = colors) + scale_fill_manual(values = colors) +
scale_y_continuous(position = 'right') + geom_hline(yintercept = dt.tmp$percent[1], lty = 2)
figs[[i]] <- g
}
figs[[2]] <- figs[[2]] + labs(y = '% of local-ATAC-QTLs')
figs[[3]] <- figs[[3]] + labs(x = 'Genomic location annotations')
right <- plot_grid(figs[[1]], figs[[2]], figs[[3]], ncol = 1)
right
# pdf('Figure8A-right.pdf', width = 3, height = 6)
# grid.arrange(figs[[1]],figs[[2]],figs[[3]],figs[[4]], ncol = 1, top = 'percentage of annotation')
# dev.off()
###################### plot left ########################
# dt <- do.call("rbind", lapply(res.anno.list[annos], function(x) x$is.mapped))
# dt <- melt(dt)
# dt <- as.data.table(dt)
# dt <- dt[c(1,5,2,6,3,7,4,8)]
# dt$Category <- paste0(dt$Var1, '-', dt$Var2)
# dt$Category <- factor(dt$Category, levels = dt$Category)
# dt
#
# annos.all <- dt$Category
# # [1] Intron-FALSE            Intron-TRUE             Distal Intergenic-FALSE Distal Intergenic-TRUE
# # [5] Promoter-FALSE          Promoter-TRUE           Exon-FALSE              Exon-TRUE
# colors <- c("darkgreen", "green4", "darkred",  "red3", "darkblue", "dodgerblue3", "orange4", "orange2")
# names(colors) <- annos.all
#
# p <- ggplot(dt, aes(x = Var1, y = value, fill = Category)) + geom_bar(stat = 'identity')
# p <- p + theme_classic() + theme(axis.text.x = element_blank(), legend.position = 'none')
# p <- p + labs(x = 'GWAS SNPs', y = 'count')
# p
# pdf('Figure8A-left.pdf', width = 2, height = 6)
# p + scale_fill_manual(values = colors) + coord_flip()
# dev.off()
dt <- do.call("rbind", lapply(res.anno.list[annos.all], function(x) x$is.mapped))
dt <- melt(dt)
dt <- as.data.table(dt)
dt <- dt[Var2 == TRUE]
dt <- dt[order(value)]
dt$Var1 <- factor(dt$Var1, levels = dt$Var1)
left <- ggplot(dt, aes(x = Var1, y = value, fill = Var1)) + geom_bar(stat = 'identity') +
coord_flip() + theme_classic() + theme(legend.position = 'bottom', axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
scale_fill_manual(values = colors) + labs(y = '# of mapped GWAS SNPs', x = 'Genomic location annotations', fill = '') +
guides(fill = guide_legend(nrow = 7, reverse = T))
pdf('FigureS8-conserve.pdf', width = 6, height = 6)
plot_grid(left, NULL, right, nrow = 1, rel_heights = c(2,2, 1.6), rel_widths = c(3,1,4))
dev.off()
pdf('FigureS8-conserve.pdf', width = 6, height = 6)
plot_grid(left, NULL, right, nrow = 1, rel_heights = c(2,2, 1.6), rel_widths = c(3,2,4))
dev.off()
pdf('FigureS8-conserve.pdf', width = 6, height = 6)
plot_grid(left, NULL, right, nrow = 1, rel_heights = c(2,2, 1.6), rel_widths = c(3,3,4))
dev.off()
