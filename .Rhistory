cat(paste('Total # of DO-eQTL genes containing causal SNP:', sum(infima$V.g >= infima$tau)))
cat(paste('Total # of DO-eQTL genes:', G, '\n'))
cat(paste('Total # of DO-eQTL genes containing causal SNP:', sum(infima$V.g >= infima$tau), '\n'))
setMethod('summary', 'infima_results', function(...){
infima <- infima_results$infima
results <- infima_results$results
G <- length(infima$V.g)
cat(paste('Total # of DO-eQTL genes:', G, '\n'))
cat(paste('Total # of DO-eQTL genes containing causal SNP:', sum(infima$V.g >= infima$tau), '\n'))
})
?setClass
setMethod('summary', 'infima_results', function(infima_results, ...){
infima <- infima_results$infima
results <- infima_results$results
G <- length(infima$V.g)
cat(paste('Total # of DO-eQTL genes:', G, '\n'))
cat(paste('Total # of DO-eQTL genes containing causal SNP:', sum(infima$V.g >= infima$tau), '\n'))
})
setClass('infima_results',
slots = c(infima = 'list', results = 'list'))
setMethod('summary', 'infima_results', function(infima_results, ...){
infima <- infima_results$infima
results <- infima_results$results
G <- length(infima$V.g)
cat(paste('Total # of DO-eQTL genes:', G, '\n'))
cat(paste('Total # of DO-eQTL genes containing causal SNP:', sum(infima$V.g >= infima$tau), '\n'))
})
a <- new('infima_results', infima = list(), results = list())
a
methods('summary')
summary <- function(x) {
UseMethod('summary', x)
}
sumary.infima_results <- function(x, ...){
infima <- x$infima
results <- x$results
G <- length(infima$V.g)
cat(paste('Total # of DO-eQTL genes:', G, '\n'))
cat(paste('Total # of DO-eQTL genes containing causal SNP:', sum(infima$V.g >= infima$tau), '\n'))
}
summary(infima_results)
class(infima_results)
summary.infima_results <- function(x, ...){
infima <- x$infima
results <- x$results
G <- length(infima$V.g)
cat(paste('Total # of DO-eQTL genes:', G, '\n'))
cat(paste('Total # of DO-eQTL genes containing causal SNP:', sum(infima$V.g >= infima$tau), '\n'))
}
summary(infima_results)
as.data.table.infima_results <- function(x, ...) {
cat(paste('Testing'))
}
as.data.table(infima_results)
foo.infima_results <- function(x, ...){
cat('!!!')
}
foo(infima_results)
foo <- function(x){
UseMethod('foo', x)
}
foo(infima_results)
str(infima)
cat(infima$alpha)
cat(paste(infima$alpha, sep = ', '))
cat(paste(infima$alpha, sep = ','))
paste(infima$alpha, sep = ',')
?paste
paste(infima$alpha, collapse = ',')
paste(infima$alpha, collapse = ', ')
paste(format(infima$alpha, nsmall = 4), collapse = ', ')
paste(format(infima$alpha, nsmall = 2), collapse = ', ')
?format
paste(format(infima$alpha, digits = 4), collapse = ', ')
cat(paste('a1 = ', format(infima$alpha, digits = 4), collapse = ', '))
cat(paste('a1 = ', paste(format(infima$alpha, digits = 4), collapse = ', ')))
cat(paste('a1 =', paste(format(infima$alpha, digits = 4), collapse = ', ')))
cat(paste('a1 = (', paste(format(infima$alpha, digits = 4), collapse = ', '), ')'))
cat(paste0('a1 = (', paste(format(infima$alpha, digits = 4), collapse = ', '), ')'))
cat(paste('INFIMA converges after', x$em.iter, 'iterations!\n'))
cat('Null generated model parameters:\n')
cat(paste0('a0 = (', paste(format(infima$alpha.0, digits = 4), collapse = ', '), ')'))
cat(paste0('b0 = (', paste(format(infima$beta.0, digits = 4), collapse = ', '), ')'))
cat('Causal generated model parameters:\n')
cat(paste0('a1 = (', paste(format(infima$alpha, digits = 4), collapse = ', '), ')'))
cat(paste0('b1 = (', paste(format(infima$beta, digits = 4), collapse = ', '), ')'))
str(infima)
cat(paste('gamma =', format(infima$gamma, digits = 4)))
summary.infima <- function(x, ...) {
cat(paste('INFIMA converges after', x$em.iter, 'iterations!\n'))
cat('Null generated model parameters:\n')
cat(paste0('a0 = (', paste(format(infima$alpha.0, digits = 4), collapse = ', '), ')\n'))
cat(paste0('b0 = (', paste(format(infima$beta.0, digits = 4), collapse = ', '), ')\n'))
cat('Causal generated model parameters:\n')
cat(paste0('a1 = (', paste(format(infima$alpha, digits = 4), collapse = ', '), ')\n'))
cat(paste0('b1 = (', paste(format(infima$beta, digits = 4), collapse = ', '), ')\n'))
cat(paste('gamma =', format(infima$gamma, digits = 4)))
summary <- list(a0 = infima$alpha.0,
b0 = infima$beta.0,
a1 = infima$alpha,
b1 = infima$beta,
gamma = infima$gamma,
n.iter = infima$em.iter)
return(summary)
}
summary(infima)
summary.infima <- function(x, ...) {
cat(paste('INFIMA converges after', x$em.iter, 'iterations!\n'))
cat('Null generated model parameters:\n')
cat(paste0('a0 = (', paste(format(infima$alpha.0, digits = 4), collapse = ', '), ')\n'))
cat(paste0('b0 = (', paste(format(infima$beta.0, digits = 4), collapse = ', '), ')\n'))
cat('Causal generated model parameters:\n')
cat(paste0('a1 = (', paste(format(infima$alpha, digits = 4), collapse = ', '), ')\n'))
cat(paste0('b1 = (', paste(format(infima$beta, digits = 4), collapse = ', '), ')\n'))
cat(paste('gamma =', format(infima$gamma, digits = 4)))
summary <- list(a0 = infima$alpha.0,
b0 = infima$beta.0,
a1 = infima$alpha,
b1 = infima$beta,
gamma = infima$gamma,
n.iter = infima$em.iter)
invisible(return(summary))
}
summary(infima)
summary.infima <- function(x, ...) {
cat(paste('INFIMA converges after', x$em.iter, 'iterations!\n'))
cat('Null generated model parameters:\n')
cat(paste0('a0 = (', paste(format(infima$alpha.0, digits = 4), collapse = ', '), ')\n'))
cat(paste0('b0 = (', paste(format(infima$beta.0, digits = 4), collapse = ', '), ')\n'))
cat('Causal generated model parameters:\n')
cat(paste0('a1 = (', paste(format(infima$alpha, digits = 4), collapse = ', '), ')\n'))
cat(paste0('b1 = (', paste(format(infima$beta, digits = 4), collapse = ', '), ')\n'))
cat(paste('gamma =', format(infima$gamma, digits = 4)))
summary <- list(a0 = infima$alpha.0,
b0 = infima$beta.0,
a1 = infima$alpha,
b1 = infima$beta,
gamma = infima$gamma,
n.iter = infima$em.iter)
invisible(summary)
}
summary(infima)
a <- summary(infima)
a
x <- infima_results
infima <- x$infima
results <- x$results
input_data <- results$input_data
output_data <- results$output_data
input_data
infima_results
infima_results$results
results
results[[1]]
results[[1]]
results
input_data[[1]]
input_data[[1]]
names(results)
results
results[[1]]
results[[1]]
x
infima <- x$infima
results <- x$results
results[[1]]
length(results)
results[1]
results
str(results)
results[[2]]
results <- results[sapply(results, function(x) !is.null(x))]
length(results)
results[[1]]
infima
results[[1]]$input_data
results[[1]]$output_data
i <- 1
current <- results[[i]]
input_data <- current$input_data
output_data <- current$output_data
input_data
dt1 <- input_data$do.eqtl
dt2 <- input_data$snpData
cbind(dt1,dt2)
current
dt1
dt2
###### Figure 1
# eQTL plot for Capsl
library(data.table)
library(ggplot2)
library(cowplot)
rm(list = ls())
setwd('~/Documents/INFIMA-manuscript/Figure1/obsolete/')
dt <- fread('Capsl cis eQTL in DO islets.csv')
chr <- paste0('chr',dt$chr[1])
colnames(dt) <- c('id', 'chr', 'pos',
'AJ', 'B6', '129', 'NOD', 'NZO', 'CAST', 'PWK', 'WSB',
'lod')
dt2 <- melt(dt, id.vars = c('id', 'chr', 'pos', 'lod'))
colnames(dt2) <- c('id', 'chr', 'pos', 'lod', 'Strain', 'AlleleEffect')
# color scheme for all 8 strains
strains <- c('129','AJ','B6','CAST','NOD','NZO','PWK','WSB')
colors <- c(rgb(240, 128, 128, maxColorValue = 255, alpha = 255),
rgb(218, 165, 32, maxColorValue = 255, alpha = 255),
rgb(128, 128, 128, maxColorValue = 255, alpha = 255),
rgb(0, 160, 0, maxColorValue = 255, alpha = 255),
rgb(16, 16, 240, maxColorValue = 255, alpha = 255),
rgb(0, 160, 240, maxColorValue = 255, alpha = 255),
rgb(240, 0, 0, maxColorValue = 255, alpha = 255),
rgb(144, 0, 224, maxColorValue = 255, alpha = 255))
dt2$Strain <- factor(dt2$Strain, levels = strains)
dt2$Wild <- ifelse(dt2$Strain %in% c('CAST', 'PWK', 'WSB'), 'wild', 'normal')
dt2$Wild <- factor(dt2$Wild, levels = c('normal', 'wild'))
lod.max.pos <- dt[which.max(lod)]$pos
g1 <- ggplot(dt2, aes(x = pos, y = lod)) +
geom_line(size = 1.2) + theme_classic() +
labs(x = paste(chr,'(Mb)'), y = 'LOD score') +
geom_vline(xintercept = lod.max.pos, lty = 2) +
xlim(c(min(dt2$pos), max(dt2$pos)))
g2 <- ggplot(dt2, aes(x = pos, y = AlleleEffect, color = Strain)) +
geom_line(aes(size = Wild)) + theme_classic() +
scale_color_manual(values = colors) +
scale_size_manual(values = c(0.8, 1.2)) +
theme(legend.position = 'none') +
labs(x = paste(chr,'(Mb)'), y = 'Allele effects') +
geom_vline(xintercept = lod.max.pos, lty = 2) +
xlim(c(min(dt2$pos), max(dt2$pos)))
g2
g3 <- ggplot(dt2[abs(pos - lod.max.pos) <= 1], aes(x = pos, y = lod)) +
ylim(c(0,max(dt2$lod))) + geom_line(color = 'grey20') + geom_point(size = 0.5) +
labs(x = paste(chr,'(Mbp)'), y = 'LOD score') + theme_grey() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.border = element_rect(linetype = "solid", fill = NA))
# pdf('Figure1C.pdf', width = 5, height = 1.5)
# g3
# dev.off()
pdf('Figure1.pdf', width = 5, height = 6)
plot_grid(g1, g2, g3, align = "v", ncol = 1, rel_heights = c(1, 2, 1))
dev.off()
getwd()
library(devtools)
document()
load_all()
data('example-10-genes')
raw_data <- raw_input_data(dt1, dt2, dt3)
model_data <- model_input_data(raw_data)
pseudocount <- compute_pseudocount(raw_data, model_data)
infima <- model_fitting(model_data, pseudocount)
infima_results <- snp_link_gene(infima, raw_data, model_data, pseudocount, fdr = 0.05, cum.pprob = 0.8, cred.set = 0.5)
infima_results
infima_results[[1]]
str(infima_results[[1]])
ls()
summary(infima)
summary(infima_results)
as.data.frame(infima_results)
summary(infima)
a <- summary(infima)
a
sessionInfo()
x <- infima_results
stopifnot(class(x) == 'infima_results')
detectCores()
ncores = 6
registerDoParallel(cores = n_cores)
ncores = detectCores() - 2
ncores
n_cores = detectCores() - 2
n_cores
registerDoParallel(cores = n_cores)
infima <- x$infima
results <- x$results
results <- results[sapply(results, function(x) !is.null(x))]
results
results[[1]]
iã€Š- 1
i <- 1
current <- results[[i]]
input_data <- current$input_data
output_data <- current$output_data
dt1 <- input_data$do.eqtl
dt2 <- input_data$snpData[, snp_id:alt]
dt1
dt2
3123+2300+3559+1327
24000-4000
input_data$cor.A.E
dt1 <- input_data$snpData[, snp_id:alt]
dt2 <- input_data$do.eqtl
input_data$p
input_data$k
dt3 <- data.table(cor.A.E = input_data$cor.A.E,
cor.A.E.rs = output_data$cor.A.E.rs,
cor.A.R = input_data$cor.A.R,
cor.A.R.rs = output_data$cor.A.R.rs,
footprint = input_data$footprint,
footprint.rs = output_data$footprint.rs,
dist = input_data$dist,
dist.rs = output_data$dist.rs
)
dt3
dt3 <- data.table(cor.A.E = input_data$cor.A.E,
cor.A.E.rs = output_data$cor.A.E.rs,
cor.A.R = input_data$cor.A.R,
cor.A.R.rs = output_data$cor.A.R.rs,
footprint = input_data$footprint,
footprint.rs = output_data$footprint.rs,
dist = input_data$dist,
dist.rs = output_data$dist.rs,
p = input_data$p,
k = input_data$k
)
dt3
input_data$B
table(names(input_data$B))
sum(table(names(input_data$B)))
dt3 <- data.table(cor.A.E = input_data$cor.A.E,
cor.A.E.rs = output_data$cor.A.E.rs,
cor.A.R = input_data$cor.A.R,
cor.A.R.rs = output_data$cor.A.R.rs,
footprint = input_data$footprint,
footprint.rs = output_data$footprint.rs,
dist = input_data$dist,
dist.rs = output_data$dist.rs,
p = input_data$p,
k = input_data$k,
pprob = output_data$Z,
pprob.rs = output_data$Z.rs
)
dt3
dt1 <- input_data$snpData[, snp_id:alt]
dt2 <- input_data$do.eqtl
dt3 <- data.table(cor.A.E = input_data$cor.A.E,
cor.A.E.rs = output_data$cor.A.E.rs,
cor.A.R = input_data$cor.A.R,
cor.A.R.rs = output_data$cor.A.R.rs,
footprint = input_data$footprint,
footprint.rs = output_data$footprint.rs,
dist = input_data$dist,
dist.rs = output_data$dist.rs,
p = input_data$p,
k = input_data$k,
pprob = output_data$Z,
pprob.rs = output_data$Z.rs)
dt1
dt2
dt3
cbind(dt1,dt2,dt3)
res <- foreach(i = 1:length(results)) %dopar% {
current <- results[[i]]
input_data <- current$input_data
output_data <- current$output_data
dt1 <- input_data$snpData[, snp_id:alt]
dt2 <- input_data$do.eqtl
dt3 <- data.table(cor.A.E = input_data$cor.A.E,
cor.A.E.rs = output_data$cor.A.E.rs,
cor.A.R = input_data$cor.A.R,
cor.A.R.rs = output_data$cor.A.R.rs,
footprint = input_data$footprint,
footprint.rs = output_data$footprint.rs,
dist = input_data$dist,
dist.rs = output_data$dist.rs,
p = input_data$p,
k = input_data$k,
pprob = output_data$Z,
pprob.rs = output_data$Z.rs)
return(cbind(dt1,dt2,dt3))
}
res
do.call('rbind', res)
input_data$Y
input_data$Y.t
input_data$A
input_data$A.t
do.call('rbind', res)
names(infima_results)
names(infima_results$results)
length(infima_results$results)
results
infima
input_data$do.eqtl
x <- infima_results
infima <- x$infima
results <- x$results
results
results <- results[sapply(results, function(x) !is.null(x))]
results
# find the indices
ensembls <- sapply(results, function(x) x$input_data$do.eqtl$ensembl)
ensembls
which(ensembls == 'sdfsd')
match(ensembls,'sdfsd')
ensembl <- 'ENSMUSG00000037995'
ensembl
ensembl %in% ensembls
! ensembl %in% ensembls
results <- results[ensembls == ensembl]
results
results
infima <- x$infima
results <- x$results
results <- results[sapply(results, function(x) !is.null(x))]
# find the indices
ensembls <- sapply(results, function(x) x$input_data$do.eqtl$ensembl)
qtl_markers <- sapply(results, function(x) x$input_data$do.eqtl$qtl_marker)
ensembls
qtl_markers
qtl_marker = 1_172713578
qtl_marker = '1_172713578'
if(! ensembl %in% ensembls){
message('ensembl id not found!')
return(NULL)
}
if(! qtl_marker %in% qtl_markers){
message('qtl_marker id not found!')
return(NULL)
}
if(! (ensembl %in% ensembls && qtl_marker %in% qtl_markers) ){
message('ensembl and qtl marker combination not found!')
return(NULL)
}
results <- results[ensembls == ensembl & qtl_markers == qtl_marker]
results
current <- results
current
input_data <- current$input_data
input_data
input_data
current[[1]]
current <- results[[1]]
input_data <- current$input_data
current$output_data
input_data <- current$input_data
names(input_data)
snps <- input_data$snpData$snp_id
snps
Y
input_data$Y
input_data$A
input_data$B.t
ind <- snps == snp_id
snp_id <- "rs51076312"
ind <- snps == snp_id
res <- list(Y = input_data$Y,
Y.t = input_data$Y.t,
A = input_data$A[ind,],
A.t = input_data$A.t[ind,],
B = input_data$B,
B.avg = input_data$B.avg,
B.t = input_data$B.t,
D = input_data$D[ind,],
E.t = input_data$E.t[ind,],
snpData = input_data$snpData[ind,])
res
document()
?input_query
document()
?raw_Data
?input_query
?raw_data
?model_data
document()
?raw_data
?model_data
?input_query
document
document()
?prior
document()
?infima
?Y
document()
?infima_results
res
input_data$do.eqtl
document()
?as.data.frame
?as.data.frame.infima_results
?dist
document()
document()
vignette()
document()
load_all()
vignette('INFIMA')
browseVignettes()
vignette()
?vignette
vignette(package = 'INFIMA')
build_vignettes()
build_vignettes()
build_vignettes()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocStyle")
build_vignettes()
devtools::clean_vignettes()
devtools::build()
library(INFIMA)
vignette(package = 'INFIMA')
ls()
install()
build_vignettes()
?build_vignettes
build_vignettes(pkg = 'INFIMA')
ls()
